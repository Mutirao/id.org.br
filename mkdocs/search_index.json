{
    "docs": [
        {
            "location": "/", 
            "text": "Documenta\u00e7\u00e3o T\u00e9cnica da aplica\u00e7\u00e3o de autentica\u00e7\u00e3o Login Cidad\u00e3o.", 
            "title": "Sobre a plataforma"
        }, 
        {
            "location": "/lc_deploy/", 
            "text": "Instala\u00e7\u00e3o \nLogin Cidad\u00e3o\n\n\nEsta documenta\u00e7\u00e3o foi baseada em um servidor GNU/Linux Debian 8.1. Se sua inten\u00e7\u00e3o \u00e9 instalar em sistema de base diferente algumas adapta\u00e7\u00f5es podem ser necess\u00e1rias. \n\n\nServer User\n\n\nPara instalar a aplica\u00e7\u00e3o \u00e9 necess\u00e1rio ter acesso a dois usu\u00e1rios: um usu\u00e1rio padr\u00e3o e um usu\u00e1rio com poderes de sudo. Voc\u00ea pode usar o usu\u00e1rio padr\u00e3o de costume de seu servidor e o root, mas recomendamos criar um usu\u00e1rio s\u00f3 para o gerenciamente do Login Cidad\u00e3o, facilitando assim o controle e o registro de logs do sistema. \n\n\n    // logado como root, crie o novo user:\n    \n# useradd --create-home --groups sudo -s /bin/bash login-cidadao\n\n    // Insira uma senha para o novo user\n    \n# passwd login-cidadao\n\n\n\n\n\n\nInstalando Depend\u00eancias\n\n\nPara que o Login Cidad\u00e3o funcione corretamente ser\u00e1 necess\u00e1rio que estejam instaladas as seguintes depend\u00eancias: \n\n Apache ou Nginx\n\n PHP \n=5.4\n\n memcached\n\n postgres ou mysql\n\n composer\n\n node.js\n* PHP Extensions\n  * php5-curl\n  * php5-intl\n  * php5-mysql ou php5-pgsql ou integra\u00e7\u00e3o de base de dados de sua prefer\u00eancia\n  * php5-memcache (Tamb\u00e9m \u00e9 poss\u00edvel usar php5-memcached mas ser\u00e1 necess\u00e1rio mudar algumas classes de Memcache para Memcached)\n\n\n    // Atualize a lista de pacotes \ndo\n seu servidor\n    \n$ \nsudo apt-get update\n\n    // Instale o servidor Nginx \n    \n$ \nsudo apt-get install nginx\n    //obs: se o apache estiver instalado ele pode dar conflito com o Nginx. \n    // Fique atento para a necessidade de desinstal\u00e1-lo. \n\n    //Caso tenha algum gerenciador de bases de dados\n(\nmysql ou postgres\n)\n voc\u00ea poder\u00e1 us\u00e1-lo. \n    //Se n\u00e3o tiver, instale o banco que quer usar. Optamos aqui por postgres\n    \n$ \nsudo apt-get install postgresql postgresql-client\n\n    // Instale o git para auxili\u00e1-lo no processo de obten\u00e7\u00e3o \ndo\n c\u00f3digo da aplica\u00e7\u00e3o\n    \n$ \nsudo apt-get install git\n\n    // Instalando pacote \ndo\n server memcached \n    \n$ \nsudo apt-get install memcached\n\n    // Instalando pacotes \ndo\n php. \n    // Observe que aqui vamos optar por usar o postgres, mas \u00e9 poss\u00edvel usar mysql sem problemas\n    \n$ \nsudo apt-get install php5 php5-cli php5-fpm php5-curl php5-intl php5-pgsql php5-memcache\n\n    // Instalando nodejs\n    \n$ \nsudo curl -sL https://deb.nodesource.com/setup_5.x \n|\n bash -\n    \n$ \nsudo apt-get install --yes nodejs\n\n\n\n\n\nCheque os requisitos do PHP\n\n\nVerifique se todas os requisitos est\u00e3o sendo cumpridos antes de iniciar a instala\u00e7\u00e3o\n    \nphp app/check.php\n\n\nConfigurando base de dados\n\n\nCrie um usu\u00e1rio no postgres e depois uma base. Sugerimos usar o mesmo nome. \n\n\n  //Como root, crie um usu\u00e1rio que funcionar\u00e1 via socket\n  # sudo -u postgres psql -c \nCREATE USER logincidadao\n\n  // Em seguinda, crie a base de dados\n  # sudo -u postgres createdb --owner mapas mapas\n\n\n\n\n\nInstalando Composer\n\n\nO Login Cidad\u00e3o usa o Composer, um gerenciador de depend\u00eancias PHP. Ele permite que voc\u00ea declare bibliotecas como depend\u00eancias no projeto que ir\u00e1 gerenciar. Para saber mais, acesse: https://getcomposer.org/doc/00-intro.md\n\n\nPara instalar:\n\n\n    // Instalando Composer\n    \n$ \nsudo curl -sS https://getcomposer.org/installer \n|\n php\n    \n$ \nsudo mv composer.phar /usr/local/bin/composer\n\n\n\n\n\nObtendo o Login Cidad\u00e3o\n\n\nAp\u00f3s instalar as depend\u00eancias, clone o reposit\u00f3rio da aplica\u00e7\u00e3o e mude as permiss\u00f5es dos arquivos para operar com apache ou nginx. Recomendamos fazer isso com o usu\u00e1rio criado e dentro de uma estrutura de diret\u00f3rios padr\u00e3o /var/www/login-cidadao, mas \u00e9 poss\u00edvel adaptar para qualquer contexto. \nO branch ativo para deploy neste reposit\u00f3rio (rede livre) \u00e9 o master\n. \n\n\n    //Logado como login-cidadao user, v\u00e1 para o diret\u00f3rio /var/www\n    $ cd /var/www\n    // Dentro do diret\u00f3rio, clone o reposit\u00f3rio da aplica\u00e7\u00e3o\n    $ sudo git clone https://github.com/redelivre/login-cidadao.git\n\n\n\n\n\nParametrizando a aplica\u00e7\u00e3o - pr\u00e9-instala\u00e7\u00e3o\n\n\nAgora vamos instalar as depend\u00eancias. Ap\u00f3s esse processo voc\u00ea dever\u00e1 preencher os parametros relativos a sua instala\u00e7\u00e3o. Portanto \u00e9 necess\u00e1rio que voc\u00ea tenha as seguintes informa\u00e7\u00f5es em m\u00e3os: \n\n\nInforma\u00e7\u00f5es de acesso ao banco de dados\n\n\n\n\nEndere\u00e7o do host da base de dados\n\n\nPorta de acesso\n\n\nUsu\u00e1rio\n\n\nSenha\n\n\nSchema (Nome do banco)\n\n\n\n\nLoadbalance\n\n\n\n\nIPs dos servidores de load balance (Para mais informa\u00e7\u00f5es consulta a \ndocumenta\u00e7\u00e3o do Symfony\n sobre o assunto).\n\n\n\n\nAcesso de desenvolvimento e monitoramento\n\n\n\n\nIPs com acesso ao ambiente de desenvolvimento\n\n\nIPs com acesso as p\u00e1ginas de monitoria (endpoints)\n\n\n\n\nMemcache e sess\u00f5es\n\n\n\n\nEndere\u00e7os (IP e porta) usados no memcache\n\n\nPrefixo da sess\u00e3o\n\n\nTempo de vida da sess\u00e3o\n\n\n\n\nEnvio de email\n\n\n\n\nEssas informa\u00e7\u00f5es variam de acordo com o tipo de servi\u00e7o escolhido. \nVer \nDocumenta\u00e7\u00e3o Symfony\n\n\n\n\nSecret\n\n\nGere uma string secreta para composi\u00e7\u00e3o de cifragem\n\n\nEx.:\n\n\n    secret:            CrieSuaStringAleatoria\n\n\n\n\n\nChaves de APIs de terceiros\n\n\n\n\nFacebook\n\n\nGoogle\n\n\nTwitter\n\n\nRecaptcha\n\n\n\n\nDominio e contatos\n\n\n\n\ndom\u00ednio da instala\u00e7\u00e3o\n\n\nEndere\u00e7o do remetente de emails da aplica\u00e7\u00e3o (Ex.: noreply@seu-dominio.com)\n\n\n\n\nAcertando permiss\u00f5es de acesso\n\n\n\u00c9 necess\u00e1rio que as permiss\u00f5es do diret\u00f3rio estejam de acordo com as permiss\u00f5es do Nginx para que os arquivos sejam acessados publicamente. \n\n\n    // Entre no diret\u00f3rio criado \n    $ cd login-cidadao\n    // Mude a permiss\u00e3o dos arquivos. Pode ser necess\u00e1rio fazer isso no final do processo novamente.\n    $ sudo chown -R login-cidadao:www-data *\n    $ sudo chown -R login-cidadao:www-data .*\n\n\n\n\n\nDepois de efetuar as mudan\u00e7as no permissionamento dos arquivos, aplique o comando de listagem de arquivos no diret\u00f3rio para verificar se foi aplicado com sucesso. Seu diret\u00f3rio deve estar assim:\n\n\n    // aplicando o comando de listagem de arquivos e permiss\u00f5es, voc\u00ea dever\u00e1 ver algo como isso:\n\n    login-cidadao@localhost:/var/www/login-cidadao$ ls -la\n    drwxr-xr-x  9 login-cidadao www-data   4096 Dec 15 20:32 .\n    drwxr-xr-x  3 login-cidadao www-data   4096 Dec 15 20:26 ..\n    drwxr-xr-x  7 login-cidadao www-data   4096 Dec 15 20:46 app\n    drwxr-xr-x  2 login-cidadao www-data   4096 Dec 15 20:26 batch\n    drwxr-xr-x  2 login-cidadao www-data   4096 Dec 15 20:33 bin\n    -rw-r--r--  1 login-cidadao www-data     42 Dec 15 20:26 .bowerrc\n    -rw-r--r--  1 login-cidadao www-data   4320 Dec 15 20:26 composer.json\n    -rw-r--r--  1 login-cidadao www-data 159040 Dec 15 20:26 composer.lock\n    drwxr-xr-x  8 login-cidadao www-data   4096 Dec 15 20:26 .git\n    -rw-r--r--  1 login-cidadao www-data    315 Dec 15 20:26 .gitignore\n    -rwxr-xr-x  1 login-cidadao www-data   3991 Dec 15 20:26 install.sh\n    -rw-r--r--  1 login-cidadao www-data  34521 Dec 15 20:26 LICENSE\n    -rw-r--r--  1 login-cidadao www-data    332 Dec 15 20:26 lvp_mock.bat\n    -rw-r--r--  1 login-cidadao www-data   3602 Dec 15 20:26 README.md\n    drwxr-xr-x  4 login-cidadao www-data   4096 Dec 15 20:26 src\n    -rw-r--r--  1 login-cidadao www-data    106 Dec 15 20:26 .travis.yml\n    -rw-r--r--  1 login-cidadao www-data   1308 Dec 15 20:26 UPGRADE-2.2.md\n    -rw-r--r--  1 login-cidadao www-data   1962 Dec 15 20:26 UPGRADE-2.3.md\n    -rw-r--r--  1 login-cidadao www-data   8495 Dec 15 20:26 UPGRADE.md\n    -rw-r--r--  1 login-cidadao www-data   2470 Dec 15 20:26 Vagrantfile\n    drwxr-xr-x 38 login-cidadao www-data   4096 Dec 15 20:46 vendor\n    drwxr-xr-x  5 login-cidadao www-data   4096 Dec 15 20:33 web\n\n\n\n\n\nBaixando dependencias via Composer\n\n\n// Certifique-se de estar dentro do diret\u00f3rio raiz do projeto\n  $ cd /var/www/login-cidadao\n  // Quando estiver rodando o composer, o arquivo parameters.yml (arquivo de parametros da inst\u00e2ncia) \n  // ser\u00e1 preenchido automaticamente. Fique atento as informa\u00e7\u00f5es inseridas\n  // Instalando as depend\u00eancias\n  $ composer install\n\n\nParametrizando manualmente\n\n\nCaso a parametriza\u00e7\u00e3o via composer seja interrompida ou tenha dados que precisem ser completados, voc\u00ea pode alterar manualmente no arquivo \nparameters.yml\n a partir do template contido em \napp/config/parameters.yml.dist\n. \n\n\nConfigurando Ngix\n\n\nserver\n \n{\n\n\n  \n#\n \nurl\n \ndo\n \nsite\n\n  \nserver_name\n  \nhttp\n://\nlogindacultura\n.\nsp\n.\ngov\n.\nbr\n;\n\n\n  \n#\n \ndiret\n\u00f3\nrio\n \nraiz\n \nda\n \naplica\n\u00e7\u00e3\no\n\n  \nroot\n  \n/\nvar\n/\nwww\n/\nlogin\n-\ncidadao\n/\nweb\n;\n\n\n  \n#\n \narquivos\n \nde\n \nlog\n \nde\n \nerro\n \nda\n \naplica\n\u00e7\u00e3\no\n\n  \n#\n \naccess_log\n   \n/\nvar\n/\nlog\n/\nlogin\n-\ncidadao\n/\nnginx\n.\naccess\n.\nlog\n;\n\n  \n#\n \nerror_log\n    \n/\nvar\n/\nlog\n/\nlogin\n-\ncidadao\n/\nnginx\n.\nerror\n.\nlog\n;\n\n\n  \nlisten\n \n80\n \ndefault_server\n;\n\n  \nlisten\n \n[\n::\n]\n:\n80\n \nipv6only\n=\non\n \ndefault_server\n;\n\n  \nlisten\n \n[\n::\n]\n:\n443\n \ndefault_server\n \nssl\n \nspdy\n \nipv6only\n=\noff\n;\n\n\n  \nadd_header\n \nStrict\n-\nTransport\n-\nSecurity\n \nmax\n-\nage\n=\n63072000\n;\n\n  \nssl_session_timeout\n \n5\nm\n;\n\n  \nssl_protocols\n  \nTLSv1\n \nTLSv1\n.\n1\n \nTLSv1\n.\n2\n;\n\n  \nssl_ciphers\n  \nAES256+EECDH:AES256+EDH\n;\n\n  \nssl_prefer_server_ciphers\n   \non\n;\n\n  \nssl_session_cache\n           \nshared\n:\nSSL\n:\n10\nm\n;\n\n  \nssl_dhparam\n                 \n/\netc\n/\nssl\n/\ncerts\n/\ndhparam\n.\npem\n;\n\n\n  \n#\n \nCaminho\n \ndo\n \ncertificado\n\n  \nssl_certificate\n \n/\netc\n/\nletsencrypt\n/\nlive\n/\nlogindacultura\n.\nsp\n.\ngov\n.\nbr\n/\nfullchain\n.\npem\n;\n\n  \nssl_certificate_key\n \n/\netc\n/\nletsencrypt\n/\nlive\n/\nlogindacultura\n.\nsp\n.\ngov\n.\nbr\n/\nprivkey\n.\npem\n;\n\n\n\n  \n#\n \narquivos\n \nativos\n \nque\n \na\n \naplica\n\u00e7\u00e3\no\n \ntem\n \nde\n \nresponder\n\n  \nindex\n \nindex\n.\nphp\n \nindex\n.\nhtml\n \nindex\n.\nhtm\n;\n\n\n  \nrewrite\n \n^/\napp\n\\\n.\nphp\n/?\n(\n.*\n)\n$\n \n/\n$\n1\n \npermanent\n;\n\n\n  \ntry_files\n \n$\nuri\n \n@\nrewriteapp\n;\n\n\n  \nlocation\n \n@\nrewriteapp\n \n{\n\n    \nrewrite\n \n^\n(\n.*\n)\n$\n \n/\napp\n.\nphp\n/\n$\n1\n \nlast\n;\n\n  \n}\n\n\n  \n#\n \nlocation\n \n/\n \n{\n\n  \n#\n     \ntry_files\n \n$\nuri\n \n$\nuri\n/\n \n/\nindex\n.\nphp\n?\n$\nargs\n;\n\n  \n#\n \n}\n\n\n\n#\n  \nlocation\n \n~*\n \n\\\n.(\njs\n|\ncss\n|\npng\n|\njpg\n|\njpeg\n|\ngif\n|\nico\n|\nwoff\n)$\n \n{\n\n\n#\n           \nexpires\n \n1\nw\n;\n\n\n#\n           \nlog_not_found\n \noff\n;\n\n\n#\n  \n}\n\n\n  \n#\n \nDeny\n \nall\n \n.\n \nfiles\n\n  \nlocation\n \n~\n \n/\n\\\n.ht\n \n{\n\n          \ndeny\n \nall\n;\n\n  \n}\n\n\n  \n#\n \nPHP\n\n  \nlocation\n \n~\n \n^/(\napp\n|\napp_dev\n|\nmemcached\n)\n\\\n.php\n(/|$)\n \n{\n\n    \n#\n \nfastcgi_split_path_info\n \n^\n(\n.+\n\\\n.\nphp\n)(\n/.*\n)\n$\n;\n\n        \n#\n \nfastcgi_buffers\n \n4\n \n256\nk\n;\n\n        \n#\n \nfastcgi_buffer_size\n \n128\nk\n;\n\n        \n#\n \nfastcgi_busy_buffers_size\n \n256\nk\n;\n\n        \ninclude\n \nfastcgi_params\n;\n\n        \nfastcgi_param\n  \nSCRIPT_FILENAME\n \n$\ndocument_root\n$\nfastcgi_script_name\n;\n\n        \nfastcgi_pass\n \nunix\n:/\nvar\n/\nrun\n/\nphp5\n-\nfpm\n-\nlogincidadao\n.\nsock\n;\n\n        \nclient_max_body_size\n \n0\n;\n\n        \nfastcgi_index\n \napp\n.\nphp\n;\n\n        \n#\n \nsend_timeout\n \n1800\n;\n\n        \n#\n \nfastcgi_read_timeout\n \n1800\n;\n\n        \n#\n \nproxy_cache_lock\n \noff\n;\n\n        \n#\n \nfastcgi_pass\n \n127\n.\n0\n.\n0\n.\n1\n:\n9000\n;\n\n  \n}\n\n  \n#\n \nStatics\n\n        \nlocation\n \n/(\nbundles\n|\nmedia\n)\n \n{\n\n                \naccess_log\n \noff\n;\n\n                \nexpires\n \n30\nd\n;\n\n\n                \ntry_files\n \n$\nuri\n \n@\nrewriteapp\n;\n\n        \n}\n\n  \ncharset\n \nutf-8\n;\n\n\n}\n\n\n\n#\n \nserver\n \n{\n\n\n#\n   \nlisten\n \n*:\n80\n;\n\n\n#\n   \nserver_name\n \nhttp\n://\nlogindacultura\n.\nsp\n.\ngov\n.\nbr\n;\n\n\n#\n   \nreturn\n \n301\n \n$\nscheme\n://\nlogindacultura\n.\nsp\n.\ngov\n.\nbr\n/\n$\nrequest_uri\n;\n\n\n#\n \n}\n\n\n\n\n\n\n//Fa\u00e7a um link simb\u00f3lico para o arquivo\n  $ sudo ln -s /etc/nginx/sites-available/login-cidadao.conf /etc/nginx/sites-enabled/login-cidadao.conf\n\n\nCertificado SSL\n\n\nVer \"Usando Certificado SSL\"\n\n\nEnvio de email\n\n\nConfigura\u00e7\u00f5es de servi\u00e7os\n\n\n\n\nVer Configura\u00e7\u00f5es\n\n\n\n\n    // Copiando o arquivo de template para o arquivo default\n    $ sudo cp /var/www/login-cidadao/app/config/parameters.yml.dist /var/www/login-cidadao/app/config/parameters.yml\n\n\n\n\n\nFique atento aos seguintes pontos: \n\n\n3.1. Conectando a base de dados: \n\n\nSe voc\u00ea estiver usando \n\n\n3.2. Configura\u00e7\u00f5es memcached\n\n\n3.3. Configura\u00e7\u00f5es de envio de email (smtp)\n\n\n3.4. Configura\u00e7\u00f5es de token\n\n\nlocale\n:\n            \nen\n\n\nsecret\n:\n            \nThisTokenIsNotSoSecretChangeIt\n\n\n\n\nlocale\n:\n            \npt_BR\n\n\nsecret\n:\n            \ncALL\n-\ng83trinzafederuserall\n#\nset900\n@\nset8\n**\n\n\n\n\n\n\n\n\nSe a verifica\u00e7\u00e3o for bem sucedida inicie a instala\u00e7\u00e3o\n    \n./install.sh\n\n\n\n\nArquivo de configura\u00e7\u00e3o \nparameters.yml\n\n\nlocale:\n -\n substitua pelo seu locale (ex. pt_BR)\n\n\nsecret:\n -\n substitua por uma longa cadeia de letras, n\u00fameros e s\u00edmbolos\n\n\nsite_domain:\n -\n substitua pelo seu dom\u00ednio/subdom\u00ednio\n\n\nrecaptcha_public_key:\n e \nrecaptcha_private_key:\n -\n gere essas chaves em https://www.google.com/recaptcha/\n\n\nregistration.cpf.empty_time:\n e \nregistration.email.unconfirmed_time:\n -\n define quanto tempo deve ser dado para que o usu\u00e1rio confirme o CPF e o email, respectivamente\n\n\nbrute_force_threshold:\n -\n quantas tentativas devem ser toleradas antes de considerar um ataque de for\u00e7a bruta\n\n\nConfigurando Nginx\n\n\nCopie o scritp padr\u00e3o para o reposit\u00f3rio de seu nginx\n\n\n    $ sudo cp /var/www/login-cidadao/batch/nginx-login-cidadao.conf /etc/nginx/sites-available/login-cidadao.conf\n\n\n\n\n\nFa\u00e7a as altera\u00e7\u00f5es necess\u00e1rias! \n\n\n\n\n\n\nEm \nDocumentRoot\n \u00e9 preciso apontar para o diret\u00f3rio \nweb\n, neste exemplo o caminho completo \u00e9 \n/var/www/login-cidadao/web\n.\n\n\n\n\n\n\nServerName deve ser preenchido com o dom\u00ednio (ex. dominio.com.br) ou subdom\u00ednio completo (ex. sub.dominio.com.br)\n\n\n\n\n\n\nPrimeiros passos p\u00f3s-instala\u00e7\u00e3o\n\n\nAdicione os seguintes aliases ao seu arquivo \n.bashrc\n (que fica no home de seu usu\u00e1rio).\n\n\n  //Abra o arquivo\n  $ nano ~./bashrc\n  //Adicione as linhas abaixo no final do arquivo\n\n    alias prod=\nphp app/console --env=prod\n\n    alias dev=\nphp app/console --env=dev\n\n\n  //Atualize o perfil do terminal  \n  $ source ~/.bashrc\n  // Obs.: Etapa desnecess\u00e1ria para logins futuros j\u00e1 que o .bashrc ser\u00e1 executado no processo de login.\n\n\n\n\n\n\n\n\n\nProcesse e ative todos os assets\n\n\nprod assets:install\n\n\nprod assetic:dump\n\n\n\n\n\n\nDar poderes de super administrador para o primeiro usu\u00e1rio\n\n\nprod fos:user:promote \nusername\n ROLE_SUPER_ADMIN\n\n\n\n\n\n\nObs. 1: Substitua \"\n\" pelo nome do usu\u00e1rio como mostrado na \u00e1rea superior direita da p\u00e1gina, geralmente o que precede o '@' do email usado na hora da cria\u00e7\u00e3o do usu\u00e1rio.\n\n\n\n\n\n\nObs. 2: Para confirmar visualmente o novo papel de super administrador fa\u00e7a um logout e depois um login. Junto ao nome dever\u00e1 haver um campo 'impersonate', ver esse campo \u00e9 a confirma\u00e7\u00e3o.\n\n\n\n\n\n\n\n\n\n\nNavegando em modo de desenvolvimento\n\n\nAdicione \n/app_dev.php\n na URL.\n\n\nAlguns comandos pr\u00e1ticos\n\n\nAssume-se que as estapas 1 e 2 dos \nPrimeiros passos p\u00f3s-instala\u00e7\u00e3o\n tenham sido cumpridos para seguir estes comandos.\n\n\n\n\nLimpar o cache\n\n\nprod cache:clear\n\n\ndev cache:clear\n\n    se n\u00e3o funcionar, em \u00faltima inst\u00e2ncia use\n\n\nrm -rf app/cache/*\n\n\nCriar ou atualizar os assets\n\n\nprod assets:install\n\n\nprod assetic:dump\n\n\nCriar ou atualizar os vendors (\u00fatil, por exemplo, quando se muda de branch)\n\n\ncomposer install\n\n\n\n\nAdicionando servi\u00e7os\n\n\nVeja em detalhe como configurar cada rede social utilizada pelo LC em \nconfigurando servicos de terceiros\n\n\nIntegrando com o Mapas Culturais\n\n\nauth.provider\n =\n \nOpauthLoginCidadao\n,\n\nauth.config\n =\n array(\n    \nclient_id\n =\n \nminha_chave_publica\n,\n    \nclient_secret\n =\n \nminha_chave_privada\n,\n    \nauth_endpoint\n =\n \nhttps://sub.dominio/oauth/v2/auth\n,\n    \ntoken_endpoint\n =\n \nhttps://sub.dominio/oauth/v2/token\n,\n    \nuser_info_endpoint\n =\n \nhttps://sub.dominio/api/v1/person.json\n\n),\n\n\n\n\n\n\n\nObs. 1: As chaves p\u00fablica e privada s\u00e3o geradas na adi\u00e7\u00e3o do servi\u00e7o.  \n\n\nObs. 2: substituir o dom\u00ednio/subdom\u00ednio das tr\u00eas \u00faltimas linhas.", 
            "title": "Instala\u00e7\u00e3o"
        }, 
        {
            "location": "/lc_deploy/#instalacao-login-cidadao", 
            "text": "Esta documenta\u00e7\u00e3o foi baseada em um servidor GNU/Linux Debian 8.1. Se sua inten\u00e7\u00e3o \u00e9 instalar em sistema de base diferente algumas adapta\u00e7\u00f5es podem ser necess\u00e1rias.", 
            "title": "Instala\u00e7\u00e3o Login Cidad\u00e3o"
        }, 
        {
            "location": "/lc_deploy/#server-user", 
            "text": "Para instalar a aplica\u00e7\u00e3o \u00e9 necess\u00e1rio ter acesso a dois usu\u00e1rios: um usu\u00e1rio padr\u00e3o e um usu\u00e1rio com poderes de sudo. Voc\u00ea pode usar o usu\u00e1rio padr\u00e3o de costume de seu servidor e o root, mas recomendamos criar um usu\u00e1rio s\u00f3 para o gerenciamente do Login Cidad\u00e3o, facilitando assim o controle e o registro de logs do sistema.       // logado como root, crie o novo user:\n     # useradd --create-home --groups sudo -s /bin/bash login-cidadao \n    // Insira uma senha para o novo user\n     # passwd login-cidadao", 
            "title": "Server User"
        }, 
        {
            "location": "/lc_deploy/#instalando-dependencias", 
            "text": "Para que o Login Cidad\u00e3o funcione corretamente ser\u00e1 necess\u00e1rio que estejam instaladas as seguintes depend\u00eancias:   Apache ou Nginx  PHP  =5.4  memcached  postgres ou mysql  composer  node.js\n* PHP Extensions\n  * php5-curl\n  * php5-intl\n  * php5-mysql ou php5-pgsql ou integra\u00e7\u00e3o de base de dados de sua prefer\u00eancia\n  * php5-memcache (Tamb\u00e9m \u00e9 poss\u00edvel usar php5-memcached mas ser\u00e1 necess\u00e1rio mudar algumas classes de Memcache para Memcached)      // Atualize a lista de pacotes  do  seu servidor\n     $  sudo apt-get update\n\n    // Instale o servidor Nginx \n     $  sudo apt-get install nginx\n    //obs: se o apache estiver instalado ele pode dar conflito com o Nginx. \n    // Fique atento para a necessidade de desinstal\u00e1-lo. \n\n    //Caso tenha algum gerenciador de bases de dados ( mysql ou postgres )  voc\u00ea poder\u00e1 us\u00e1-lo. \n    //Se n\u00e3o tiver, instale o banco que quer usar. Optamos aqui por postgres\n     $  sudo apt-get install postgresql postgresql-client\n\n    // Instale o git para auxili\u00e1-lo no processo de obten\u00e7\u00e3o  do  c\u00f3digo da aplica\u00e7\u00e3o\n     $  sudo apt-get install git\n\n    // Instalando pacote  do  server memcached \n     $  sudo apt-get install memcached\n\n    // Instalando pacotes  do  php. \n    // Observe que aqui vamos optar por usar o postgres, mas \u00e9 poss\u00edvel usar mysql sem problemas\n     $  sudo apt-get install php5 php5-cli php5-fpm php5-curl php5-intl php5-pgsql php5-memcache\n\n    // Instalando nodejs\n     $  sudo curl -sL https://deb.nodesource.com/setup_5.x  |  bash -\n     $  sudo apt-get install --yes nodejs", 
            "title": "Instalando Depend\u00eancias"
        }, 
        {
            "location": "/lc_deploy/#cheque-os-requisitos-do-php", 
            "text": "Verifique se todas os requisitos est\u00e3o sendo cumpridos antes de iniciar a instala\u00e7\u00e3o\n     php app/check.php", 
            "title": "Cheque os requisitos do PHP"
        }, 
        {
            "location": "/lc_deploy/#configurando-base-de-dados", 
            "text": "Crie um usu\u00e1rio no postgres e depois uma base. Sugerimos usar o mesmo nome.     //Como root, crie um usu\u00e1rio que funcionar\u00e1 via socket\n  # sudo -u postgres psql -c  CREATE USER logincidadao \n  // Em seguinda, crie a base de dados\n  # sudo -u postgres createdb --owner mapas mapas", 
            "title": "Configurando base de dados"
        }, 
        {
            "location": "/lc_deploy/#instalando-composer", 
            "text": "O Login Cidad\u00e3o usa o Composer, um gerenciador de depend\u00eancias PHP. Ele permite que voc\u00ea declare bibliotecas como depend\u00eancias no projeto que ir\u00e1 gerenciar. Para saber mais, acesse: https://getcomposer.org/doc/00-intro.md  Para instalar:      // Instalando Composer\n     $  sudo curl -sS https://getcomposer.org/installer  |  php\n     $  sudo mv composer.phar /usr/local/bin/composer", 
            "title": "Instalando Composer"
        }, 
        {
            "location": "/lc_deploy/#obtendo-o-login-cidadao", 
            "text": "Ap\u00f3s instalar as depend\u00eancias, clone o reposit\u00f3rio da aplica\u00e7\u00e3o e mude as permiss\u00f5es dos arquivos para operar com apache ou nginx. Recomendamos fazer isso com o usu\u00e1rio criado e dentro de uma estrutura de diret\u00f3rios padr\u00e3o /var/www/login-cidadao, mas \u00e9 poss\u00edvel adaptar para qualquer contexto.  O branch ativo para deploy neste reposit\u00f3rio (rede livre) \u00e9 o master .       //Logado como login-cidadao user, v\u00e1 para o diret\u00f3rio /var/www\n    $ cd /var/www\n    // Dentro do diret\u00f3rio, clone o reposit\u00f3rio da aplica\u00e7\u00e3o\n    $ sudo git clone https://github.com/redelivre/login-cidadao.git", 
            "title": "Obtendo o Login Cidad\u00e3o"
        }, 
        {
            "location": "/lc_deploy/#parametrizando-a-aplicacao-pre-instalacao", 
            "text": "Agora vamos instalar as depend\u00eancias. Ap\u00f3s esse processo voc\u00ea dever\u00e1 preencher os parametros relativos a sua instala\u00e7\u00e3o. Portanto \u00e9 necess\u00e1rio que voc\u00ea tenha as seguintes informa\u00e7\u00f5es em m\u00e3os:   Informa\u00e7\u00f5es de acesso ao banco de dados   Endere\u00e7o do host da base de dados  Porta de acesso  Usu\u00e1rio  Senha  Schema (Nome do banco)   Loadbalance   IPs dos servidores de load balance (Para mais informa\u00e7\u00f5es consulta a  documenta\u00e7\u00e3o do Symfony  sobre o assunto).   Acesso de desenvolvimento e monitoramento   IPs com acesso ao ambiente de desenvolvimento  IPs com acesso as p\u00e1ginas de monitoria (endpoints)   Memcache e sess\u00f5es   Endere\u00e7os (IP e porta) usados no memcache  Prefixo da sess\u00e3o  Tempo de vida da sess\u00e3o   Envio de email   Essas informa\u00e7\u00f5es variam de acordo com o tipo de servi\u00e7o escolhido. \nVer  Documenta\u00e7\u00e3o Symfony   Secret  Gere uma string secreta para composi\u00e7\u00e3o de cifragem  Ex.:      secret:            CrieSuaStringAleatoria  Chaves de APIs de terceiros   Facebook  Google  Twitter  Recaptcha   Dominio e contatos   dom\u00ednio da instala\u00e7\u00e3o  Endere\u00e7o do remetente de emails da aplica\u00e7\u00e3o (Ex.: noreply@seu-dominio.com)", 
            "title": "Parametrizando a aplica\u00e7\u00e3o - pr\u00e9-instala\u00e7\u00e3o"
        }, 
        {
            "location": "/lc_deploy/#acertando-permissoes-de-acesso", 
            "text": "\u00c9 necess\u00e1rio que as permiss\u00f5es do diret\u00f3rio estejam de acordo com as permiss\u00f5es do Nginx para que os arquivos sejam acessados publicamente.       // Entre no diret\u00f3rio criado \n    $ cd login-cidadao\n    // Mude a permiss\u00e3o dos arquivos. Pode ser necess\u00e1rio fazer isso no final do processo novamente.\n    $ sudo chown -R login-cidadao:www-data *\n    $ sudo chown -R login-cidadao:www-data .*  Depois de efetuar as mudan\u00e7as no permissionamento dos arquivos, aplique o comando de listagem de arquivos no diret\u00f3rio para verificar se foi aplicado com sucesso. Seu diret\u00f3rio deve estar assim:      // aplicando o comando de listagem de arquivos e permiss\u00f5es, voc\u00ea dever\u00e1 ver algo como isso:\n\n    login-cidadao@localhost:/var/www/login-cidadao$ ls -la\n    drwxr-xr-x  9 login-cidadao www-data   4096 Dec 15 20:32 .\n    drwxr-xr-x  3 login-cidadao www-data   4096 Dec 15 20:26 ..\n    drwxr-xr-x  7 login-cidadao www-data   4096 Dec 15 20:46 app\n    drwxr-xr-x  2 login-cidadao www-data   4096 Dec 15 20:26 batch\n    drwxr-xr-x  2 login-cidadao www-data   4096 Dec 15 20:33 bin\n    -rw-r--r--  1 login-cidadao www-data     42 Dec 15 20:26 .bowerrc\n    -rw-r--r--  1 login-cidadao www-data   4320 Dec 15 20:26 composer.json\n    -rw-r--r--  1 login-cidadao www-data 159040 Dec 15 20:26 composer.lock\n    drwxr-xr-x  8 login-cidadao www-data   4096 Dec 15 20:26 .git\n    -rw-r--r--  1 login-cidadao www-data    315 Dec 15 20:26 .gitignore\n    -rwxr-xr-x  1 login-cidadao www-data   3991 Dec 15 20:26 install.sh\n    -rw-r--r--  1 login-cidadao www-data  34521 Dec 15 20:26 LICENSE\n    -rw-r--r--  1 login-cidadao www-data    332 Dec 15 20:26 lvp_mock.bat\n    -rw-r--r--  1 login-cidadao www-data   3602 Dec 15 20:26 README.md\n    drwxr-xr-x  4 login-cidadao www-data   4096 Dec 15 20:26 src\n    -rw-r--r--  1 login-cidadao www-data    106 Dec 15 20:26 .travis.yml\n    -rw-r--r--  1 login-cidadao www-data   1308 Dec 15 20:26 UPGRADE-2.2.md\n    -rw-r--r--  1 login-cidadao www-data   1962 Dec 15 20:26 UPGRADE-2.3.md\n    -rw-r--r--  1 login-cidadao www-data   8495 Dec 15 20:26 UPGRADE.md\n    -rw-r--r--  1 login-cidadao www-data   2470 Dec 15 20:26 Vagrantfile\n    drwxr-xr-x 38 login-cidadao www-data   4096 Dec 15 20:46 vendor\n    drwxr-xr-x  5 login-cidadao www-data   4096 Dec 15 20:33 web", 
            "title": "Acertando permiss\u00f5es de acesso"
        }, 
        {
            "location": "/lc_deploy/#baixando-dependencias-via-composer", 
            "text": "// Certifique-se de estar dentro do diret\u00f3rio raiz do projeto\n  $ cd /var/www/login-cidadao\n  // Quando estiver rodando o composer, o arquivo parameters.yml (arquivo de parametros da inst\u00e2ncia) \n  // ser\u00e1 preenchido automaticamente. Fique atento as informa\u00e7\u00f5es inseridas\n  // Instalando as depend\u00eancias\n  $ composer install", 
            "title": "Baixando dependencias via Composer"
        }, 
        {
            "location": "/lc_deploy/#parametrizando-manualmente", 
            "text": "Caso a parametriza\u00e7\u00e3o via composer seja interrompida ou tenha dados que precisem ser completados, voc\u00ea pode alterar manualmente no arquivo  parameters.yml  a partir do template contido em  app/config/parameters.yml.dist .", 
            "title": "Parametrizando manualmente"
        }, 
        {
            "location": "/lc_deploy/#configurando-ngix", 
            "text": "server   { \n\n   #   url   do   site \n   server_name    http :// logindacultura . sp . gov . br ; \n\n   #   diret \u00f3 rio   raiz   da   aplica \u00e7\u00e3 o \n   root    / var / www / login - cidadao / web ; \n\n   #   arquivos   de   log   de   erro   da   aplica \u00e7\u00e3 o \n   #   access_log     / var / log / login - cidadao / nginx . access . log ; \n   #   error_log      / var / log / login - cidadao / nginx . error . log ; \n\n   listen   80   default_server ; \n   listen   [ :: ] : 80   ipv6only = on   default_server ; \n   listen   [ :: ] : 443   default_server   ssl   spdy   ipv6only = off ; \n\n   add_header   Strict - Transport - Security   max - age = 63072000 ; \n   ssl_session_timeout   5 m ; \n   ssl_protocols    TLSv1   TLSv1 . 1   TLSv1 . 2 ; \n   ssl_ciphers    AES256+EECDH:AES256+EDH ; \n   ssl_prefer_server_ciphers     on ; \n   ssl_session_cache             shared : SSL : 10 m ; \n   ssl_dhparam                   / etc / ssl / certs / dhparam . pem ; \n\n   #   Caminho   do   certificado \n   ssl_certificate   / etc / letsencrypt / live / logindacultura . sp . gov . br / fullchain . pem ; \n   ssl_certificate_key   / etc / letsencrypt / live / logindacultura . sp . gov . br / privkey . pem ; \n\n\n   #   arquivos   ativos   que   a   aplica \u00e7\u00e3 o   tem   de   responder \n   index   index . php   index . html   index . htm ; \n\n   rewrite   ^/ app \\ . php /? ( .* ) $   / $ 1   permanent ; \n\n   try_files   $ uri   @ rewriteapp ; \n\n   location   @ rewriteapp   { \n     rewrite   ^ ( .* ) $   / app . php / $ 1   last ; \n   } \n\n   #   location   /   { \n   #       try_files   $ uri   $ uri /   / index . php ? $ args ; \n   #   }  #    location   ~*   \\ .( js | css | png | jpg | jpeg | gif | ico | woff )$   {  #             expires   1 w ;  #             log_not_found   off ;  #    } \n\n   #   Deny   all   .   files \n   location   ~   / \\ .ht   { \n           deny   all ; \n   } \n\n   #   PHP \n   location   ~   ^/( app | app_dev | memcached ) \\ .php (/|$)   { \n     #   fastcgi_split_path_info   ^ ( .+ \\ . php )( /.* ) $ ; \n         #   fastcgi_buffers   4   256 k ; \n         #   fastcgi_buffer_size   128 k ; \n         #   fastcgi_busy_buffers_size   256 k ; \n         include   fastcgi_params ; \n         fastcgi_param    SCRIPT_FILENAME   $ document_root $ fastcgi_script_name ; \n         fastcgi_pass   unix :/ var / run / php5 - fpm - logincidadao . sock ; \n         client_max_body_size   0 ; \n         fastcgi_index   app . php ; \n         #   send_timeout   1800 ; \n         #   fastcgi_read_timeout   1800 ; \n         #   proxy_cache_lock   off ; \n         #   fastcgi_pass   127 . 0 . 0 . 1 : 9000 ; \n   } \n   #   Statics \n         location   /( bundles | media )   { \n                 access_log   off ; \n                 expires   30 d ; \n\n                 try_files   $ uri   @ rewriteapp ; \n         } \n   charset   utf-8 ;  }  #   server   {  #     listen   *: 80 ;  #     server_name   http :// logindacultura . sp . gov . br ;  #     return   301   $ scheme :// logindacultura . sp . gov . br / $ request_uri ;  #   }   //Fa\u00e7a um link simb\u00f3lico para o arquivo\n  $ sudo ln -s /etc/nginx/sites-available/login-cidadao.conf /etc/nginx/sites-enabled/login-cidadao.conf", 
            "title": "Configurando Ngix"
        }, 
        {
            "location": "/lc_deploy/#certificado-ssl", 
            "text": "Ver \"Usando Certificado SSL\"", 
            "title": "Certificado SSL"
        }, 
        {
            "location": "/lc_deploy/#envio-de-email_1", 
            "text": "", 
            "title": "Envio de email"
        }, 
        {
            "location": "/lc_deploy/#configuracoes-de-servicos", 
            "text": "Ver Configura\u00e7\u00f5es       // Copiando o arquivo de template para o arquivo default\n    $ sudo cp /var/www/login-cidadao/app/config/parameters.yml.dist /var/www/login-cidadao/app/config/parameters.yml  Fique atento aos seguintes pontos:   3.1. Conectando a base de dados:   Se voc\u00ea estiver usando   3.2. Configura\u00e7\u00f5es memcached  3.3. Configura\u00e7\u00f5es de envio de email (smtp)  3.4. Configura\u00e7\u00f5es de token  locale :              en  secret :              ThisTokenIsNotSoSecretChangeIt  locale :              pt_BR  secret :              cALL - g83trinzafederuserall # set900 @ set8 **    Se a verifica\u00e7\u00e3o for bem sucedida inicie a instala\u00e7\u00e3o\n     ./install.sh", 
            "title": "Configura\u00e7\u00f5es de servi\u00e7os"
        }, 
        {
            "location": "/lc_deploy/#arquivo-de-configuracao-parametersyml", 
            "text": "locale:  -  substitua pelo seu locale (ex. pt_BR)  secret:  -  substitua por uma longa cadeia de letras, n\u00fameros e s\u00edmbolos  site_domain:  -  substitua pelo seu dom\u00ednio/subdom\u00ednio  recaptcha_public_key:  e  recaptcha_private_key:  -  gere essas chaves em https://www.google.com/recaptcha/  registration.cpf.empty_time:  e  registration.email.unconfirmed_time:  -  define quanto tempo deve ser dado para que o usu\u00e1rio confirme o CPF e o email, respectivamente  brute_force_threshold:  -  quantas tentativas devem ser toleradas antes de considerar um ataque de for\u00e7a bruta", 
            "title": "Arquivo de configura\u00e7\u00e3o parameters.yml"
        }, 
        {
            "location": "/lc_deploy/#configurando-nginx", 
            "text": "Copie o scritp padr\u00e3o para o reposit\u00f3rio de seu nginx      $ sudo cp /var/www/login-cidadao/batch/nginx-login-cidadao.conf /etc/nginx/sites-available/login-cidadao.conf  Fa\u00e7a as altera\u00e7\u00f5es necess\u00e1rias!     Em  DocumentRoot  \u00e9 preciso apontar para o diret\u00f3rio  web , neste exemplo o caminho completo \u00e9  /var/www/login-cidadao/web .    ServerName deve ser preenchido com o dom\u00ednio (ex. dominio.com.br) ou subdom\u00ednio completo (ex. sub.dominio.com.br)    Primeiros passos p\u00f3s-instala\u00e7\u00e3o  Adicione os seguintes aliases ao seu arquivo  .bashrc  (que fica no home de seu usu\u00e1rio).    //Abra o arquivo\n  $ nano ~./bashrc\n  //Adicione as linhas abaixo no final do arquivo\n\n    alias prod= php app/console --env=prod \n    alias dev= php app/console --env=dev \n\n  //Atualize o perfil do terminal  \n  $ source ~/.bashrc\n  // Obs.: Etapa desnecess\u00e1ria para logins futuros j\u00e1 que o .bashrc ser\u00e1 executado no processo de login.    Processe e ative todos os assets  prod assets:install  prod assetic:dump    Dar poderes de super administrador para o primeiro usu\u00e1rio  prod fos:user:promote  username  ROLE_SUPER_ADMIN    Obs. 1: Substitua \" \" pelo nome do usu\u00e1rio como mostrado na \u00e1rea superior direita da p\u00e1gina, geralmente o que precede o '@' do email usado na hora da cria\u00e7\u00e3o do usu\u00e1rio.    Obs. 2: Para confirmar visualmente o novo papel de super administrador fa\u00e7a um logout e depois um login. Junto ao nome dever\u00e1 haver um campo 'impersonate', ver esse campo \u00e9 a confirma\u00e7\u00e3o.", 
            "title": "Configurando Nginx"
        }, 
        {
            "location": "/lc_deploy/#navegando-em-modo-de-desenvolvimento", 
            "text": "Adicione  /app_dev.php  na URL.", 
            "title": "Navegando em modo de desenvolvimento"
        }, 
        {
            "location": "/lc_deploy/#alguns-comandos-praticos", 
            "text": "Assume-se que as estapas 1 e 2 dos  Primeiros passos p\u00f3s-instala\u00e7\u00e3o  tenham sido cumpridos para seguir estes comandos.   Limpar o cache  prod cache:clear  dev cache:clear \n    se n\u00e3o funcionar, em \u00faltima inst\u00e2ncia use  rm -rf app/cache/*  Criar ou atualizar os assets  prod assets:install  prod assetic:dump  Criar ou atualizar os vendors (\u00fatil, por exemplo, quando se muda de branch)  composer install", 
            "title": "Alguns comandos pr\u00e1ticos"
        }, 
        {
            "location": "/lc_deploy/#adicionando-servicos", 
            "text": "Veja em detalhe como configurar cada rede social utilizada pelo LC em  configurando servicos de terceiros", 
            "title": "Adicionando servi\u00e7os"
        }, 
        {
            "location": "/lc_deploy/#integrando-com-o-mapas-culturais", 
            "text": "auth.provider  =   OpauthLoginCidadao , auth.config  =  array(\n     client_id  =   minha_chave_publica ,\n     client_secret  =   minha_chave_privada ,\n     auth_endpoint  =   https://sub.dominio/oauth/v2/auth ,\n     token_endpoint  =   https://sub.dominio/oauth/v2/token ,\n     user_info_endpoint  =   https://sub.dominio/api/v1/person.json \n),   Obs. 1: As chaves p\u00fablica e privada s\u00e3o geradas na adi\u00e7\u00e3o do servi\u00e7o.    Obs. 2: substituir o dom\u00ednio/subdom\u00ednio das tr\u00eas \u00faltimas linhas.", 
            "title": "Integrando com o Mapas Culturais"
        }, 
        {
            "location": "/lc_config/", 
            "text": "Configura\u00e7\u00f5es\n\n\nAPI Twitter\n\n\nhttps://twittercommunity.com/t/how-to-get-my-api-key/7033\n\n\nGo to https://dev.twitter.com/apps/new42.4k and log in, if necessary\nSupply the necessary required fields, accept the TOS, and solve the CAPTCHA.\nSubmit the form\nCopy the consumer key (API key) and consumer secret from the screen into your application\n\n\n\n\n\nIf you also need the access token representing your own account's relationship with the application:\n\n\nEnsure that your application is configured correctly with the permission level you need (read-only, read-write, read-write-with-direct messages).\nOn the application\ns detail page, invoke the \nYour access token\n feature to automatically negotiate the access token at the permission level you need.\nCopy the indicated access token and access token secret from the screen into your application\n\n\n\n\n\nBe sure and configure your application as needed before attempting the \"your access token\" step.\n\n\nFacebook API\n\n\nDocumenta\u00e7\u00e3o incompleta\n\n\nRecaptcha Key\n\n\nDocumenta\u00e7\u00e3o incompleta", 
            "title": "Configura\u00e7\u00f5es"
        }, 
        {
            "location": "/lc_config/#configuracoes", 
            "text": "", 
            "title": "Configura\u00e7\u00f5es"
        }, 
        {
            "location": "/lc_config/#api-twitter", 
            "text": "https://twittercommunity.com/t/how-to-get-my-api-key/7033  Go to https://dev.twitter.com/apps/new42.4k and log in, if necessary\nSupply the necessary required fields, accept the TOS, and solve the CAPTCHA.\nSubmit the form\nCopy the consumer key (API key) and consumer secret from the screen into your application  If you also need the access token representing your own account's relationship with the application:  Ensure that your application is configured correctly with the permission level you need (read-only, read-write, read-write-with-direct messages).\nOn the application s detail page, invoke the  Your access token  feature to automatically negotiate the access token at the permission level you need.\nCopy the indicated access token and access token secret from the screen into your application  Be sure and configure your application as needed before attempting the \"your access token\" step.", 
            "title": "API Twitter"
        }, 
        {
            "location": "/lc_config/#facebook-api", 
            "text": "Documenta\u00e7\u00e3o incompleta", 
            "title": "Facebook API"
        }, 
        {
            "location": "/lc_config/#recaptcha-key", 
            "text": "Documenta\u00e7\u00e3o incompleta", 
            "title": "Recaptcha Key"
        }, 
        {
            "location": "/lc_config_logout_remote/", 
            "text": "Logout \"Remoto\"\n\n\nLogout Remoto \u00e9 o nome da funcionalidade que permite um Client OAuth, devidamente autorizado por um usu\u00e1rio, a gerar uma Logout Key. A Logout Key ser\u00e1 usada para deslogar esse usu\u00e1rio com o simples acessar de um link.\n\n\nPassos\n\n\n\n\nO Client OAuth (tamb\u00e9m conhecido como Servi\u00e7o ou Aplica\u00e7\u00e3o de Terceiros) solicita, caso j\u00e1 n\u00e3o tenha, um Access Token atraves do grant type de Client Credentials. (\nLeia mais sobre OAuth\n)\n\n\nO Client OAuth usa seu Access Token para solicitar a Logout Key para a pessoa que j\u00e1 autorizou, previamente, esse Client utilizando o escopo \nlogout\n.\n\n\nO Client OAuth recebe a Logout Key e ent\u00e3o redireciona o usu\u00e1rio para a URL de logout passando essa chave rec\u00e9m obtida.\n\n\nO Usu\u00e1rio \u00e9 desconectado do Login Cidad\u00e3o.\n\n\n\n\nNota:\n Cada Logout Key tem um tempo de vida de 5 minutos e s\u00f3 pode ser usada uma \u00fanica vez.\n\n\nPassos Detalhados\n\n\nObtendo o Access Token\n\n\nEssa etapa \u00e9 espec\u00edfica da sua linguagem de programa\u00e7\u00e3o e biblioteca OAuth utilizadas, ent\u00e3o cabe a voc\u00ea pesquisar como usar as ferramentas de sua escolha.\n\n\nSolicitando uma Logout Key\n\n\nA Logout Key \u00e9 obtida ao chamar a API do Login Cidad\u00e3o \nGET /api/v1/person/{personId}/logout-key.json\n e autenticando usando o Access Token da sua aplica\u00e7\u00e3o.\n\n\nExemplo:\n\n\nRequest:\n\n\nGET /api/v1/person/1/logout-key.json\n\n\nAuthorization: Bearer ZTQzNWMzMWM...TY4M2JkNTdhZGFhMTFiZmYwZA\n\n\n\n\n\n\nResponse:\n\n\n{\n\n    \nkey\n:\n \n7cfe184...4d71c6e\n,\n\n    \nurl\n:\n \nhttp://meu.rs.gov.br/logout/if-not-remembered/7cfe184...4d71c6e\n\n\n}\n\n\n\n\n\n\nObserve que, para sua conveni\u00eancia, n\u00f3s j\u00e1 retornamos a URL completa para onde o usu\u00e1rio deve ser encaminhado.\n\n\nRedirecionando o usu\u00e1rio\n\n\nDe posse da Logout Key e da URL voc\u00ea pode alternativamente redirectionar o usu\u00e1rio para essa URL ou abri-la em um frame escondido na sua p\u00e1gina.", 
            "title": "Configurando Logout Remote"
        }, 
        {
            "location": "/lc_config_logout_remote/#logout-remoto", 
            "text": "Logout Remoto \u00e9 o nome da funcionalidade que permite um Client OAuth, devidamente autorizado por um usu\u00e1rio, a gerar uma Logout Key. A Logout Key ser\u00e1 usada para deslogar esse usu\u00e1rio com o simples acessar de um link.", 
            "title": "Logout \"Remoto\""
        }, 
        {
            "location": "/lc_config_logout_remote/#passos", 
            "text": "O Client OAuth (tamb\u00e9m conhecido como Servi\u00e7o ou Aplica\u00e7\u00e3o de Terceiros) solicita, caso j\u00e1 n\u00e3o tenha, um Access Token atraves do grant type de Client Credentials. ( Leia mais sobre OAuth )  O Client OAuth usa seu Access Token para solicitar a Logout Key para a pessoa que j\u00e1 autorizou, previamente, esse Client utilizando o escopo  logout .  O Client OAuth recebe a Logout Key e ent\u00e3o redireciona o usu\u00e1rio para a URL de logout passando essa chave rec\u00e9m obtida.  O Usu\u00e1rio \u00e9 desconectado do Login Cidad\u00e3o.   Nota:  Cada Logout Key tem um tempo de vida de 5 minutos e s\u00f3 pode ser usada uma \u00fanica vez.", 
            "title": "Passos"
        }, 
        {
            "location": "/lc_config_logout_remote/#passos-detalhados", 
            "text": "Obtendo o Access Token  Essa etapa \u00e9 espec\u00edfica da sua linguagem de programa\u00e7\u00e3o e biblioteca OAuth utilizadas, ent\u00e3o cabe a voc\u00ea pesquisar como usar as ferramentas de sua escolha.  Solicitando uma Logout Key  A Logout Key \u00e9 obtida ao chamar a API do Login Cidad\u00e3o  GET /api/v1/person/{personId}/logout-key.json  e autenticando usando o Access Token da sua aplica\u00e7\u00e3o.  Exemplo:  Request:  GET /api/v1/person/1/logout-key.json  Authorization: Bearer ZTQzNWMzMWM...TY4M2JkNTdhZGFhMTFiZmYwZA   Response:  { \n     key :   7cfe184...4d71c6e , \n     url :   http://meu.rs.gov.br/logout/if-not-remembered/7cfe184...4d71c6e  }   Observe que, para sua conveni\u00eancia, n\u00f3s j\u00e1 retornamos a URL completa para onde o usu\u00e1rio deve ser encaminhado.  Redirecionando o usu\u00e1rio  De posse da Logout Key e da URL voc\u00ea pode alternativamente redirectionar o usu\u00e1rio para essa URL ou abri-la em um frame escondido na sua p\u00e1gina.", 
            "title": "Passos Detalhados"
        }, 
        {
            "location": "/lc_config_ssl/", 
            "text": "How To Secure Apache with Let's Encrypt on Ubuntu 14.04\nPosted Dec 18, 2015 180.7k views Security Apache Let's Encrypt Ubuntu\nIntroduction\n\n\nThis tutorial will show you how to set up a TLS/SSL certificate from Let\u2019s Encrypt on an Ubuntu 14.04 server running Apache as a web server. We will also cover how to automate the certificate renewal process using a cron job.\n\n\nSSL certificates are used within web servers to encrypt the traffic between the server and client, providing extra security for users accessing your application. Let\u2019s Encrypt provides an easy way to obtain and install trusted certificates for free.\nPrerequisites\n\n\nIn order to complete this guide, you will need:\n\n\nAn Ubuntu 14.04 server with a non-root sudo user, which you can set up by following our Initial Server Setup guide\nThe Apache web server installed with one or more domain names properly configured\n\n\n\n\n\nWhen you are ready to move on, log into your server using your sudo account.\nStep 1 \u2014 Install the Server Dependencies\n\n\nThe first thing we need to do is to update the package manager cache with:\n\n\nsudo apt-get update\n\n\n\n\n\nWe will need git in order to download the Let\u2019s Encrypt client. To install git, run:\n\n\nsudo apt-get install git\n\n\n\n\n\nStep 2 \u2014 Download the Let\u2019s Encrypt Client\n\n\nNext, we will download the Let\u2019s Encrypt client from its official repository, placing its files in a special location on the server. We will do this to facilitate the process of updating the repository files when a new release is available. Because the Let\u2019s Encrypt client is still in beta, frequent updates might be necessary to correct bugs and implement new functionality.\n\n\nWe will clone the Let\u2019s Encrypt repository under /opt, which is a standard directory for placing third-party software on Unix systems:\n\n\nsudo git clone https://github.com/letsencrypt/letsencrypt /opt/letsencrypt\n\n\n\n\n\nThis will create a local copy of the official Let\u2019s Encrypt repository under /opt/letsencrypt.\nStep 3 \u2014 Set Up the SSL Certificate\n\n\nGenerating the SSL Certificate for Apache using the Let\u2019s Encrypt client is quite straightforward. The client will automatically obtain and install a new SSL certificate that is valid for the domains provided as parameters.\n\n\nAccess the letsencrypt directory:\n\n\ncd /opt/letsencrypt\n\n\n\n\n\nTo execute the interactive installation and obtain a certificate that covers only a single domain, run the letsencrypt-auto command with:\n\n\n./letsencrypt-auto --apache -d example.com\n\n\n\n\n\nIf you want to install a single certificate that is valid for multiple domains or subdomains, you can pass them as additional parameters to the command. The first domain name in the list of parameters will be the base domain used by Let\u2019s Encrypt to create the certificate, and for that reason we recommend that you pass the bare top-level domain name as first in the list, followed by any additional subdomains or aliases:\n\n\n./letsencrypt-auto --apache -d example.com -d www.example.com\n\n\n\n\n\nFor this example, the base domain will be example.com.\n\n\nAfter the dependencies are installed, you will be presented with a step-by-step guide to customize your certificate options. You will be asked to provide an email address for lost key recovery and notices, and you will be able to choose between enabling both http and https access or force all requests to redirect to https.\n\n\nWhen the installation is finished, you should be able to find the generated certificate files at /etc/letsencrypt/live. You can verify the status of your SSL certificate with the following link (don\u2019t forget to replace example.com with your base domain):\n\n\nhttps://www.ssllabs.com/ssltest/analyze.html?d=example.com\nlatest\n\n\nYou should now be able to access your website using a https prefix.\nStep 4 \u2014 Set Up Auto Renewal\n\n\nLet\u2019s Encrypt certificates are valid for 90 days, but it\u2019s recommended that you renew the certificates every 60 days to allow a margin of error. The Let's Encrypt client has a renew command that automatically checks the currently installed certificates and tries to renew them if they are less than 30 days away from the expiration date.\n\n\nTo trigger the renewal process for all installed domains, you should run:\n\n\n./letsencrypt-auto renew\n\n\nBecause we recently installed the certificate, the command will only check for the expiration date and print a message informing that the certificate is not due to renewal yet. The output should look similar to this:\n\n\nChecking for new version...\nRequesting root privileges to run letsencrypt...\n   /root/.local/share/letsencrypt/bin/letsencrypt renew\nProcessing /etc/letsencrypt/renewal/example.com.conf\n\n\nThe following certs are not due for renewal yet:\n  /etc/letsencrypt/live/example.com/fullchain.pem (skipped)\nNo renewals were attempted.\n\n\nNotice that if you created a bundled certificate with multiple domains, only the base domain name will be shown in the output, but the renewal should be valid for all domains included in this certificate.\n\n\nA practical way to ensure your certificates won\u2019t get outdated is to create a cron job that will periodically execute the automatic renewal command for you. Since the renewal first checks for the expiration date and only executes the renewal if the certificate is less than 30 days away from expiration, it is safe to create a cron job that runs every week or even every day, for instance.\n\n\nLet's edit the crontab to create a new job that will run the renewal command every week. To edit the crontab for the root user, run:\n\n\nsudo crontab -e\n\n\n\n\n\nInclude the following content, all in one line:\n\n\ncrontab\n\n\n30 2 * * 1 /opt/letsencrypt/letsencrypt-auto renew \n /var/log/le-renew.log\n\n\nSave and exit. This will create a new cron job that will execute the letsencrypt-auto renew command every Monday at 2:30 am. The output produced by the command will be piped to a log file located at /var/log/le-renewal.log.\n\n\nFor more information on how to create and schedule cron jobs, you can check our How to Use Cron to Automate Tasks in a VPS guide.\nStep 5 \u2014 Updating the Let\u2019s Encrypt Client (optional)\n\n\nWhenever new updates are available for the client, you can update your local copy by running a git pull from inside the Let\u2019s Encrypt directory:\n\n\ncd /opt/letsencrypt\nsudo git pull\n\n\n\n\n\nThis will download all recent changes to the repository, updating your client.\nConclusion\n\n\nIn this guide, we saw how to install a free SSL certificate from Let\u2019s Encrypt in order to secure a website hosted with Apache. Because the Let\u2019s Encrypt client is still in beta, we recommend that you check the official Let\u2019s Encrypt blog for important updates from time to time.\n\n\nsource: https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-14-04", 
            "title": "Configurando SSL"
        }, 
        {
            "location": "/lc_config_third_part_services/", 
            "text": "Para a configura\u00e7\u00e3o dos servi\u00e7os descritos abaixo \u00e9 necess\u00e1rio criar uma imagem (png/jpg) representativa da aplica\u00e7\u00e3o para o facebook, twitter e google. Aconselho cri\u00e1-la com tamanho 1024x1024 pois \u00e9 o tamanho obrigat\u00f3rio no facebook e poder\u00e1 ser usada nos outros servi\u00e7os.\n\n\nFacebook\n\n\nO primeiro passo para cria\u00e7\u00e3o de um novo aplicativo e ter acesso as chaves utilizadas pelo LC para integrar com o facebook \u00e9 acessar o endere\u00e7o \nhttps://developers.facebook.com/\n e informar alguns detalhes como descrito abaixo.\n\n\nNo primeiro formul\u00e1rio as informa\u00e7\u00f5es abaixo s\u00e3o obrigat\u00f3rias:\n\n\n\n\nDisplay Name\n\n\nNamespace\n\n\nApp Domains\n\n\nContact Email\n\n\n\n\nA seguir \u00e9 necess\u00e1rio adicionar a plataforma web e configurar o a url do site onde ser\u00e1 usado o login.\n\n\nNa aba \"App Details\" \u00e9 obrigat\u00f3rio preencher:\n\n\n\n\nShort Description\n\n\nPublisher\n\n\nCategory\n\n\nTagline\n\n\nLong Description\n\n\nPrivacy Policy URL\n\n\nUser Support Email\n\n\n\n\nNa \u00e1rea gr\u00e1fica, \u00e9 obrigat\u00f3rio inserir um \u00edcone e 4 screenshots de exemplo da aplica\u00e7\u00e3o:\n\n\n\n\nApp Icon\n\n\nSmall App Icon\n\n\n\n\nPor \u00faltimo, ser\u00e1 necess\u00e1rio incluir as permiss\u00f5es \"user_location\" e \"user_birthday\", com isso algumas outras informa\u00e7\u00f5es ser\u00e3o necess\u00e1rias mas o Facebook ir\u00e1 destacar o que \u00e9 obrigat\u00f3rio preencher.\n\n\nTwitter\n\n\nO endere\u00e7o para ter acesso as chaves e constru\u00e7\u00e3o do aplicativo no twitter \u00e9 \nhttps://apps.twitter.com/\n.\n\n\nO cadastro n\u00e3o necessita de nenhuma configura\u00e7\u00e3o mais avan\u00e7ada.\n\n\nGoogle\n\n\n\u00c9 importante n\u00e3o confundir login utilizando google sign-in, com o login atrav\u00e9s do google plus, esse \u00faltimo n\u00e3o est\u00e1 mais sendo aconselhado a ser usado e por isso n\u00e3o vamos utiliz\u00e1-lo.\n\n\nAo acessar o endere\u00e7o \nhttps://console.developers.google.com/apis/credentials\n voc\u00ea vai ter acesso ao console do Google e ser\u00e1 necess\u00e1rio criar um projeto.\n\n\nA partir do projeto voc\u00ea ter\u00e1 que escolher a cria\u00e7\u00e3o de uma credencial que deve ser do tipo oAuth.\n\n\nNas configura\u00e7\u00f5es voc\u00ea dever\u00e1 informas as seguintes URL (Authorized redirect URIs):\n\n\n\n\nhttps://LC_DOMAIN_URL/connect/service/google\n\n\nhttps://LC_DOMAIN_URL/login/check-google\n\n\n\n\nRecaptcha\n\n\nO endere\u00e7o para ter acesso as chaves \u00e9 \nhttps://www.google.com/recaptcha/\n\n\nO processo \u00e9 bem simples e os detalhes a serem preenchidos s\u00e3o auto explicativos.", 
            "title": "Configurando Servi\u00e7os Terceiros"
        }, 
        {
            "location": "/lc_config_third_part_services/#facebook", 
            "text": "O primeiro passo para cria\u00e7\u00e3o de um novo aplicativo e ter acesso as chaves utilizadas pelo LC para integrar com o facebook \u00e9 acessar o endere\u00e7o  https://developers.facebook.com/  e informar alguns detalhes como descrito abaixo.  No primeiro formul\u00e1rio as informa\u00e7\u00f5es abaixo s\u00e3o obrigat\u00f3rias:   Display Name  Namespace  App Domains  Contact Email   A seguir \u00e9 necess\u00e1rio adicionar a plataforma web e configurar o a url do site onde ser\u00e1 usado o login.  Na aba \"App Details\" \u00e9 obrigat\u00f3rio preencher:   Short Description  Publisher  Category  Tagline  Long Description  Privacy Policy URL  User Support Email   Na \u00e1rea gr\u00e1fica, \u00e9 obrigat\u00f3rio inserir um \u00edcone e 4 screenshots de exemplo da aplica\u00e7\u00e3o:   App Icon  Small App Icon   Por \u00faltimo, ser\u00e1 necess\u00e1rio incluir as permiss\u00f5es \"user_location\" e \"user_birthday\", com isso algumas outras informa\u00e7\u00f5es ser\u00e3o necess\u00e1rias mas o Facebook ir\u00e1 destacar o que \u00e9 obrigat\u00f3rio preencher.", 
            "title": "Facebook"
        }, 
        {
            "location": "/lc_config_third_part_services/#twitter", 
            "text": "O endere\u00e7o para ter acesso as chaves e constru\u00e7\u00e3o do aplicativo no twitter \u00e9  https://apps.twitter.com/ .  O cadastro n\u00e3o necessita de nenhuma configura\u00e7\u00e3o mais avan\u00e7ada.", 
            "title": "Twitter"
        }, 
        {
            "location": "/lc_config_third_part_services/#google", 
            "text": "\u00c9 importante n\u00e3o confundir login utilizando google sign-in, com o login atrav\u00e9s do google plus, esse \u00faltimo n\u00e3o est\u00e1 mais sendo aconselhado a ser usado e por isso n\u00e3o vamos utiliz\u00e1-lo.  Ao acessar o endere\u00e7o  https://console.developers.google.com/apis/credentials  voc\u00ea vai ter acesso ao console do Google e ser\u00e1 necess\u00e1rio criar um projeto.  A partir do projeto voc\u00ea ter\u00e1 que escolher a cria\u00e7\u00e3o de uma credencial que deve ser do tipo oAuth.  Nas configura\u00e7\u00f5es voc\u00ea dever\u00e1 informas as seguintes URL (Authorized redirect URIs):   https://LC_DOMAIN_URL/connect/service/google  https://LC_DOMAIN_URL/login/check-google", 
            "title": "Google"
        }, 
        {
            "location": "/lc_config_third_part_services/#recaptcha", 
            "text": "O endere\u00e7o para ter acesso as chaves \u00e9  https://www.google.com/recaptcha/  O processo \u00e9 bem simples e os detalhes a serem preenchidos s\u00e3o auto explicativos.", 
            "title": "Recaptcha"
        }, 
        {
            "location": "/lc_api/", 
            "text": "REST API\n\n\nNesse documento voc\u00ea encontra informa\u00e7\u00f5es b\u00e1sicas para usar nossa REST API.\n\n\nUma melhor descri\u00e7\u00e3o e documenta\u00e7\u00e3o dos recursos dispon\u00edveis na API podem ser encontrados em \nhttp://\nDOM\u00cdNIO DO LOGIN CIDAD\u00c3O\n/api/doc/\n.\n\n\nAutentica\u00e7\u00e3o\n\n\nNossa REST API usa OAuth 2 para autentica\u00e7\u00e3o atrav\u00e9s do uso de Access Tokens. Voc\u00ea pode ler mais sobre isso \naqui (RFC 6749)\n e \naqui (RFC 6750)\n.\n\n\nObtendo um Access Token\n\n\nMUITO IMPORTANTE: O que fazer ao receber uma resposta de token\n\n\nIsto \u00e9 \nMUITO IMPORTANTE\n: Toda vez que voc\u00ea receber uma resposta a uma solicita\u00e7\u00e3o de token, independentemente do grant type utilizado, voc\u00ea receber\u00e1 o Access Token, obviamente, mas tamb\u00e9m um Refresh Token e um tempo de expira\u00e7\u00e3o do Access Token. Voc\u00ea \nPRECISA\n armazenar essas informa\u00e7\u00f5es para que consiga solicitar um novo Access Token quando o que voc\u00ea recebeu expirar. Se voc\u00ea n\u00e3o fizer isso, depender\u00e1 de intera\u00e7\u00e3o do usu\u00e1rio para receber um novo Access Token, o que \u00e9 claramente \np\u00e9ssimo\n quando se est\u00e1 no meio de um cron job, por exemplo.\n\n\nVoc\u00ea pode, eventualmente, ser \npunido\n por solicitar novos Access Tokens em vez de renovar os que voc\u00ea j\u00e1 possui.\n\n\nAl\u00e9m do processo normal de obten\u00e7\u00e3o de Access Token atrav\u00e9s do grant type \nauthorization_code\n, que lhe retorna um token espec\u00edfico para um usu\u00e1rio, voc\u00ea pode receber um token relativo ao seu Client OAuth atrav\u00e9s do uso de Client Credentials com o grant type \nclient_credentials\n. Isso \u00e9 especialmente \u00fatil quando se est\u00e1 fazendo diversas chamadas \u00e0 API para v\u00e1rios usu\u00e1rios diferentes que j\u00e1 autorizaram sua aplica\u00e7\u00e3o.\n\n\nClient Credentials\n\n\nClient Credentials \u00e9 uma forma de obter um Access Token relativo ao seu pr\u00f3prio Client OAuth, em vez de um referente a um usu\u00e1rio.\n\n\nNaturalmente seu uso depender\u00e1 de como a sua biblioteca OAuth 2 foi implementada, mas basicamente ela far\u00e1, na primeira vez, quando voc\u00ea ainda n\u00e3o tem um Access Token, uma requisi\u00e7\u00e3o POST para o endpoint de tokens (\n/oauth/v2/token\n) com os seguintes par\u00e2metros:\n\n\n\n\ngrant_type: precisa ser \nclient_credentials\n\n\nclient_id: sua chave p\u00fablica\n\n\nclient_secret: sua chave privada (tamb\u00e9m conhecida como secret/segredo)\n\n\n\n\nA resposta deve ser algo como:\n\n\n{\n\n    \naccess_token\n:\n \nYjcxOWZkNj...NDIxYTMzNg\n,\n\n    \nexpires_in\n:\n \n3600\n,\n\n    \ntoken_type\n:\n \nbearer\n,\n\n    \nscope\n:\n \npublic_profile ...\n,\n\n    \nrefresh_token\n:\n \nMGE1OTQ4Yz...NDYyMTc1YQ\n\n\n}\n\n\n\n\n\n\nDepois disso, por favor lembre-se de armazenar o \nRefresh Token\n recebido conforme instru\u00eddo \naqui\n.\n\n\nRefresh Token\n\n\nUm Access Token pode ser obtido usando um Refresh Token enviando uma requisi\u00e7\u00e3o POST ao endpoint de tokens \n/oauth/v2/token\n conforme os par\u00e2metros:\n\n\n\n\ngrant_type: precisa ser \nrefresh_token\n\n\nclient_id: sua chave p\u00fablica\n\n\nclient_secret: sua chave privada (tamb\u00e9m conhecida como secret/segredo)\n\n\nrefresh_token: seu refresh token\n\n\n\n\nE como resposta voc\u00ea deve receber:\n\n\n{\n\n    \naccess_token\n:\n \nOTk2OTM3OT...ZDAzNGNkMg\n,\n\n    \nexpires_in\n:\n \n3600\n,\n\n    \ntoken_type\n:\n \nbearer\n,\n\n    \nscope\n:\n \npublic_profile ...\n,\n\n    \nrefresh_token\n:\n \nZGY4ZDJiNm...ZGI1NzRlNw\n\n\n}\n\n\n\n\n\n\nNesse momento seu antigo Refresh Token n\u00e3o pode mais ser usado, portanto voc\u00ea deve armazenar o novo token recebido da mesma maneira que faria ao solicitar o Access Token pela primeira vez (\nnota importante\n).\n\n\nExemplos\n\n\nA seguir voc\u00ea encontrar\u00e1 exemplos dos dois m\u00e9todos mais comuns de acessar uma API protegida por OAuth 2.\n\n\nUsando o campo Authorization do Header da Requisi\u00e7\u00e3o\n\n\nGET\n \n/api/v1/person.json\n \nHTTP\n/\n1.1\n\n\nHost\n:\n \nmeu.rs.gov.br\n\n\nAuthorization\n:\n \nBearer YTY4ZDA0M2...YTU3ZjI3Ng\n\n\n\n\n\n\nUsando um par\u00e2metro na URI\n\n\nGET\n \n/api/v1/person.json?access_token=YTY4ZDA0M2...YTU3ZjI3Ng\n \nHTTP\n/\n1.1\n\n\nHost\n:\n \nmeu.rs.gov.br\n\n\n\n\n\n\nVeja tamb\u00e9m\n\n\nEnviando Notifica\u00e7\u00f5es", 
            "title": "Usando a API"
        }, 
        {
            "location": "/lc_api/#rest-api", 
            "text": "Nesse documento voc\u00ea encontra informa\u00e7\u00f5es b\u00e1sicas para usar nossa REST API.  Uma melhor descri\u00e7\u00e3o e documenta\u00e7\u00e3o dos recursos dispon\u00edveis na API podem ser encontrados em  http:// DOM\u00cdNIO DO LOGIN CIDAD\u00c3O /api/doc/ .", 
            "title": "REST API"
        }, 
        {
            "location": "/lc_api/#autenticacao", 
            "text": "Nossa REST API usa OAuth 2 para autentica\u00e7\u00e3o atrav\u00e9s do uso de Access Tokens. Voc\u00ea pode ler mais sobre isso  aqui (RFC 6749)  e  aqui (RFC 6750) .  Obtendo um Access Token  MUITO IMPORTANTE: O que fazer ao receber uma resposta de token  Isto \u00e9  MUITO IMPORTANTE : Toda vez que voc\u00ea receber uma resposta a uma solicita\u00e7\u00e3o de token, independentemente do grant type utilizado, voc\u00ea receber\u00e1 o Access Token, obviamente, mas tamb\u00e9m um Refresh Token e um tempo de expira\u00e7\u00e3o do Access Token. Voc\u00ea  PRECISA  armazenar essas informa\u00e7\u00f5es para que consiga solicitar um novo Access Token quando o que voc\u00ea recebeu expirar. Se voc\u00ea n\u00e3o fizer isso, depender\u00e1 de intera\u00e7\u00e3o do usu\u00e1rio para receber um novo Access Token, o que \u00e9 claramente  p\u00e9ssimo  quando se est\u00e1 no meio de um cron job, por exemplo.  Voc\u00ea pode, eventualmente, ser  punido  por solicitar novos Access Tokens em vez de renovar os que voc\u00ea j\u00e1 possui.  Al\u00e9m do processo normal de obten\u00e7\u00e3o de Access Token atrav\u00e9s do grant type  authorization_code , que lhe retorna um token espec\u00edfico para um usu\u00e1rio, voc\u00ea pode receber um token relativo ao seu Client OAuth atrav\u00e9s do uso de Client Credentials com o grant type  client_credentials . Isso \u00e9 especialmente \u00fatil quando se est\u00e1 fazendo diversas chamadas \u00e0 API para v\u00e1rios usu\u00e1rios diferentes que j\u00e1 autorizaram sua aplica\u00e7\u00e3o.  Client Credentials  Client Credentials \u00e9 uma forma de obter um Access Token relativo ao seu pr\u00f3prio Client OAuth, em vez de um referente a um usu\u00e1rio.  Naturalmente seu uso depender\u00e1 de como a sua biblioteca OAuth 2 foi implementada, mas basicamente ela far\u00e1, na primeira vez, quando voc\u00ea ainda n\u00e3o tem um Access Token, uma requisi\u00e7\u00e3o POST para o endpoint de tokens ( /oauth/v2/token ) com os seguintes par\u00e2metros:   grant_type: precisa ser  client_credentials  client_id: sua chave p\u00fablica  client_secret: sua chave privada (tamb\u00e9m conhecida como secret/segredo)   A resposta deve ser algo como:  { \n     access_token :   YjcxOWZkNj...NDIxYTMzNg , \n     expires_in :   3600 , \n     token_type :   bearer , \n     scope :   public_profile ... , \n     refresh_token :   MGE1OTQ4Yz...NDYyMTc1YQ  }   Depois disso, por favor lembre-se de armazenar o  Refresh Token  recebido conforme instru\u00eddo  aqui .  Refresh Token  Um Access Token pode ser obtido usando um Refresh Token enviando uma requisi\u00e7\u00e3o POST ao endpoint de tokens  /oauth/v2/token  conforme os par\u00e2metros:   grant_type: precisa ser  refresh_token  client_id: sua chave p\u00fablica  client_secret: sua chave privada (tamb\u00e9m conhecida como secret/segredo)  refresh_token: seu refresh token   E como resposta voc\u00ea deve receber:  { \n     access_token :   OTk2OTM3OT...ZDAzNGNkMg , \n     expires_in :   3600 , \n     token_type :   bearer , \n     scope :   public_profile ... , \n     refresh_token :   ZGY4ZDJiNm...ZGI1NzRlNw  }   Nesse momento seu antigo Refresh Token n\u00e3o pode mais ser usado, portanto voc\u00ea deve armazenar o novo token recebido da mesma maneira que faria ao solicitar o Access Token pela primeira vez ( nota importante ).  Exemplos  A seguir voc\u00ea encontrar\u00e1 exemplos dos dois m\u00e9todos mais comuns de acessar uma API protegida por OAuth 2.  Usando o campo Authorization do Header da Requisi\u00e7\u00e3o  GET   /api/v1/person.json   HTTP / 1.1  Host :   meu.rs.gov.br  Authorization :   Bearer YTY4ZDA0M2...YTU3ZjI3Ng   Usando um par\u00e2metro na URI  GET   /api/v1/person.json?access_token=YTY4ZDA0M2...YTU3ZjI3Ng   HTTP / 1.1  Host :   meu.rs.gov.br", 
            "title": "Autentica\u00e7\u00e3o"
        }, 
        {
            "location": "/lc_api/#veja-tambem", 
            "text": "Enviando Notifica\u00e7\u00f5es", 
            "title": "Veja tamb\u00e9m"
        }, 
        {
            "location": "/lc_api_sending_notifications/", 
            "text": "Exemplos da API REST\n\n\nEnviando Notifica\u00e7\u00f5es\n\n\nEnviar notifica\u00e7\u00f5es pelo Login Cidad\u00e3o \u00e9 t\u00e3o f\u00e1cil quanto fazer uma requisi\u00e7\u00e3o POST autenticada por OAuth 2.\n\n\nAutentica\u00e7\u00e3o\n\n\nVoc\u00ea pode autenticar via Client Credentials ou informando diretamente o Access Token de uma pessoa. Se voc\u00ea est\u00e1 enviando mais de uma notifica\u00e7\u00e3o e faz algum tempo desde que o Access Token foi emitido, ent\u00e3o usar Client Credentials \u00e9 altamente recomendado e \u00e9 uma ideia melhor j\u00e1 que voc\u00ea economizar\u00e1 seu limite da API visto que n\u00e3o ter\u00e1 que solicitar novos Access Tokens para diversas pessoas.\n\n\nEnviando uma Notifica\u00e7\u00e3o\n\n\nPara criar uma notifica\u00e7\u00e3o basta fazer uma requisi\u00e7\u00e3o POST para nossa API de Notifica\u00e7\u00f5es, autenticada com OAuth 2 com um Access Token e informando, pelo menos, estes par\u00e2metros:\n\n\n\n\ntitle: o t\u00edtulo da notifica\u00e7\u00e3o\n\n\nshortText: uma breve descri\u00e7\u00e3o\n\n\nperson: o Identificador \u00danico do destinat\u00e1rio\n\n\nsender: o Identificador \u00danico do seu Client OAuth\n\n\ncategory: o Identificador \u00danico da categoria da notifica\u00e7\u00e3o\n\n\nplaceholders: os Placeholders da notifica\u00e7\u00e3o\n\n\n\n\nUm exemplo de requisi\u00e7\u00e3o POST poderia ser o seguinte:\n\n\nPOST\n \n/api/v1/person/notification.json\n \nHTTP\n/\n1.1\n\n\nHost\n:\n \nmeu.rs.gov.br\n\n\nContent-Type\n:\n \napplication/x-www-form-urlencoded\n\n\nAuthorization\n:\n \nBearer M2M5YjgzNj...ZDg4OTJiNA\n\n\ntitle=My+Nice+Title\nshortText=This+is+the+notification%27s+brief+description\nperson=23521\nsender=42\ncategory=953\nplaceholders%5Bname%5D=Fulano+de+Tal\nplaceholders%5BextraInfo%5D=Something+here\n\n\n\n\n\nNeste exemplo, estamos enviando os seguintes dados:\n\n\n{\n\n    \ntitle\n:\n \nMy Nice Title\n,\n\n    \nshortText\n:\n \nThis is the notification\ns brief description\n,\n\n    \nperson\n:\n \n23521\n,\n\n    \nsender\n:\n \n42\n,\n\n    \ncategory\n:\n \n953\n,\n\n    \nplaceholders\n:\n \n{\n\n        \nname\n:\n \nFulano de Tal\n,\n\n        \nextraInfo\n:\n \nSomething here\n\n    \n}\n\n\n}\n\n\n\n\n\n\nComo resposta, voc\u00ea receber\u00e1 um status code HTTP 201, como qualquer API RESTful deveria, mas como cortesia n\u00f3s tamb\u00e9m lhe retornaremos o ID da notifica\u00e7\u00e3o rec\u00e9m criada como nesse exemplo:\n\n\n{\n\n    \nid\n:\n \n654\n\n\n}\n\n\n\n\n\n\nRecebendo o retorno de leitura da notifica\u00e7\u00e3o\n\n\nPara receber um aviso de que o destinatario da notifica\u00e7\u00e3o leu a mensagem deve-se acrescentar na notifica\u00e7\u00e3o o par\u00e2mentro \ncallbackUrl\n:\n\n\n{\n\n    \n...\n\n    \ncallbackUrl\n \n:\n \nhttps://mysite/\n\n    \n...\n\n\n}\n\n\n\n\n\n\nCaso tenha sido informado uma URL no par\u00e2metro \ncallbackUrl\n da notifica\u00e7\u00e3o, no momento em que usu\u00e1rio ler a notifica\u00e7\u00e3o ser\u00e1 enviando um requisi\u00e7\u00e3o para aquele endere\u00e7o.\nA requisi\u00e7\u00e3o ser\u00e1 do tipo POST e devolver\u00e1 dois par\u00e2metros, o parametro \ndata\n e o par\u00e2metro \nsignature\n.\nO par\u00e2metro \ndata\n \u00e9 uma estrutura de dados serializada no formato JSON. Nessa estrutura temos os seguintes dados:\n\n\n{\n\n    \n//o identificador \u00fanico da notifica\u00e7\u00e3o\n\n    \nid\n:\n \n1\n,\n\n    \n//o identificador \u00fanico do usu\u00e1rio\n\n    \nperson_id\n:\n \n1\n,\n\n    \n//a data e hora da leitura da notifica\u00e7\u00e3o no formato Unix timestamp\n\n    \nread_date\n:\n \n1272509157\n\n\n}\n\n\n\n\n\n\nO par\u00e2metro \nsignature\n \u00e9 uma assinatura do tipo \nHMAC\n, usando a fun\u00e7\u00e3o \nsha256\n sobre a informa\u00e7\u00e3o contida no par\u00e2metro \ndata\n. A senha utilizada para fazer essa assinatura \u00e9 a Chave privada (ou Secret) do Client OAuth. Dessa forma, \u00e9 possivel garantir a autenticidade do mensagem enviada.", 
            "title": "Enviando notifica\u00e7\u00f5es"
        }, 
        {
            "location": "/lc_api_sending_notifications/#exemplos-da-api-rest", 
            "text": "", 
            "title": "Exemplos da API REST"
        }, 
        {
            "location": "/lc_api_sending_notifications/#enviando-notificacoes", 
            "text": "Enviar notifica\u00e7\u00f5es pelo Login Cidad\u00e3o \u00e9 t\u00e3o f\u00e1cil quanto fazer uma requisi\u00e7\u00e3o POST autenticada por OAuth 2.  Autentica\u00e7\u00e3o  Voc\u00ea pode autenticar via Client Credentials ou informando diretamente o Access Token de uma pessoa. Se voc\u00ea est\u00e1 enviando mais de uma notifica\u00e7\u00e3o e faz algum tempo desde que o Access Token foi emitido, ent\u00e3o usar Client Credentials \u00e9 altamente recomendado e \u00e9 uma ideia melhor j\u00e1 que voc\u00ea economizar\u00e1 seu limite da API visto que n\u00e3o ter\u00e1 que solicitar novos Access Tokens para diversas pessoas.  Enviando uma Notifica\u00e7\u00e3o  Para criar uma notifica\u00e7\u00e3o basta fazer uma requisi\u00e7\u00e3o POST para nossa API de Notifica\u00e7\u00f5es, autenticada com OAuth 2 com um Access Token e informando, pelo menos, estes par\u00e2metros:   title: o t\u00edtulo da notifica\u00e7\u00e3o  shortText: uma breve descri\u00e7\u00e3o  person: o Identificador \u00danico do destinat\u00e1rio  sender: o Identificador \u00danico do seu Client OAuth  category: o Identificador \u00danico da categoria da notifica\u00e7\u00e3o  placeholders: os Placeholders da notifica\u00e7\u00e3o   Um exemplo de requisi\u00e7\u00e3o POST poderia ser o seguinte:  POST   /api/v1/person/notification.json   HTTP / 1.1  Host :   meu.rs.gov.br  Content-Type :   application/x-www-form-urlencoded  Authorization :   Bearer M2M5YjgzNj...ZDg4OTJiNA \n\ntitle=My+Nice+Title shortText=This+is+the+notification%27s+brief+description person=23521 sender=42 category=953 placeholders%5Bname%5D=Fulano+de+Tal placeholders%5BextraInfo%5D=Something+here  Neste exemplo, estamos enviando os seguintes dados:  { \n     title :   My Nice Title , \n     shortText :   This is the notification s brief description , \n     person :   23521 , \n     sender :   42 , \n     category :   953 , \n     placeholders :   { \n         name :   Fulano de Tal , \n         extraInfo :   Something here \n     }  }   Como resposta, voc\u00ea receber\u00e1 um status code HTTP 201, como qualquer API RESTful deveria, mas como cortesia n\u00f3s tamb\u00e9m lhe retornaremos o ID da notifica\u00e7\u00e3o rec\u00e9m criada como nesse exemplo:  { \n     id :   654  }   Recebendo o retorno de leitura da notifica\u00e7\u00e3o  Para receber um aviso de que o destinatario da notifica\u00e7\u00e3o leu a mensagem deve-se acrescentar na notifica\u00e7\u00e3o o par\u00e2mentro  callbackUrl :  { \n     ... \n     callbackUrl   :   https://mysite/ \n     ...  }   Caso tenha sido informado uma URL no par\u00e2metro  callbackUrl  da notifica\u00e7\u00e3o, no momento em que usu\u00e1rio ler a notifica\u00e7\u00e3o ser\u00e1 enviando um requisi\u00e7\u00e3o para aquele endere\u00e7o.\nA requisi\u00e7\u00e3o ser\u00e1 do tipo POST e devolver\u00e1 dois par\u00e2metros, o parametro  data  e o par\u00e2metro  signature .\nO par\u00e2metro  data  \u00e9 uma estrutura de dados serializada no formato JSON. Nessa estrutura temos os seguintes dados:  { \n     //o identificador \u00fanico da notifica\u00e7\u00e3o \n     id :   1 , \n     //o identificador \u00fanico do usu\u00e1rio \n     person_id :   1 , \n     //a data e hora da leitura da notifica\u00e7\u00e3o no formato Unix timestamp \n     read_date :   1272509157  }   O par\u00e2metro  signature  \u00e9 uma assinatura do tipo  HMAC , usando a fun\u00e7\u00e3o  sha256  sobre a informa\u00e7\u00e3o contida no par\u00e2metro  data . A senha utilizada para fazer essa assinatura \u00e9 a Chave privada (ou Secret) do Client OAuth. Dessa forma, \u00e9 possivel garantir a autenticidade do mensagem enviada.", 
            "title": "Enviando Notifica\u00e7\u00f5es"
        }, 
        {
            "location": "/lc_develop_integration/", 
            "text": "Integra\u00e7\u00e3o\n\n\nIntrodu\u00e7\u00e3o\n\n\nEsta p\u00e1gina descreve como fazer um integra\u00e7\u00e3o b\u00e1sica com o Login Cidadao, um gerenciador de identidades que utiliza o protocolo OAuth 2.\n\n\nCaso queira mais informa\u00e7\u00f5es sobre OAuth 2, por favor, leia \n a p\u00e1gina do OAuth 2 \n e tamb\u00e9m \n este post de Aaron Parecki \n.\n\n\nO protocolo OAuth 2 \u00e9 complexo, por isso, a menos que voc\u00ea conhe\u00e7a profundamente tanto a \n RFC-6749 \n quanto as melhores pr\u00e1ticas em seguran\u00e7a, utilize alguma biblioteca implementada e mantida por algu\u00e9m que conhe\u00e7a.\n\n\nAntes de Come\u00e7ar\n\n\nInforma\u00e7\u00f5es B\u00e1sicas\n\n\nS\u00e3o informa\u00e7\u00f5es b\u00e1sicas e fundamentais para o funcionamento dos exemplos e do processo de autentica\u00e7\u00e3o:\n\n\n\n\nURLs do Login Cidad\u00e3o\n\n\nURL de Autoriza\u00e7\u00e3o. Exemplo: \nhttps://meu.rs.gov.br/oauth/v2/auth\n\n\nURL para solicita\u00e7\u00e3o de Access Token. Exemplo: \nhttps://meu.rs.gov.br/oauth/v2/token\n\n\nURL com os dados do usu\u00e1rio autenticado. Exemplo: \nhttps://meu.rs.gov.br/api/v1/person.json\n\n\nO conjunto de escopos que ser\u00e3o acessados\n\n\nChave p\u00fablica do Client OAuth\n\n\nChave privada (ou Secret) do Client OAuth\n\n\nPrecisamos especificar as URLs de Retorno que o gerenciador de identidades esta autorizado a retornar dados.\n\n\n\n\nTanto as URLs do Login Cidad\u00e3o quanto as chaves de acesso devem ser obtidas na instala\u00e7\u00e3o do Login Cidad\u00e3o na qual voc\u00ea deseja autenticar-se enquanto as URLs de Retorno dependem do seu Client OAuth.\n\n\nEscopos\n\n\nVoc\u00ea pode solicitar quantos e quais escopos desejar, entretanto esteja ciente de que quanto mais informa\u00e7\u00f5es voc\u00ea solicitar ao usu\u00e1rio menor ser\u00e1 a probabilidade do mesmo lhe autorizar a receb\u00ea-las, portanto solicite apenas o \nabsolutamente necess\u00e1rio\n.\n\n\nA lista dos escopos suportados pode ser encontrada \n aqui \n.\n\n\nExemplos\n\n\nNo nosso branch \nexemplos\n demonstramos a integra\u00e7\u00e3o utilizando \nJava\n, \nPHP 5.2\n e \nPHP 5.3\n.\nEm todos os exemplos \u00e9 necess\u00e1rio ter as \n Informa\u00e7\u00f5es B\u00e1sicas \n.\n\n\nPara continuar escolha um dos seguintes exemplos para explicarmos como utilizar a autentica\u00e7\u00e3o:\n\n\n\n\n Exemplo utilizando PHP 5.2 \n\n\n Exemplo utilizando PHP 5.3 \n\n\n Exemplo utilizando Java", 
            "title": "Integra\u00e7\u00e3o com outras aplica\u00e7\u00f5es"
        }, 
        {
            "location": "/lc_develop_integration/#integracao", 
            "text": "", 
            "title": "Integra\u00e7\u00e3o"
        }, 
        {
            "location": "/lc_develop_integration/#introducao", 
            "text": "Esta p\u00e1gina descreve como fazer um integra\u00e7\u00e3o b\u00e1sica com o Login Cidadao, um gerenciador de identidades que utiliza o protocolo OAuth 2.  Caso queira mais informa\u00e7\u00f5es sobre OAuth 2, por favor, leia   a p\u00e1gina do OAuth 2   e tamb\u00e9m   este post de Aaron Parecki  .  O protocolo OAuth 2 \u00e9 complexo, por isso, a menos que voc\u00ea conhe\u00e7a profundamente tanto a   RFC-6749   quanto as melhores pr\u00e1ticas em seguran\u00e7a, utilize alguma biblioteca implementada e mantida por algu\u00e9m que conhe\u00e7a.", 
            "title": "Introdu\u00e7\u00e3o"
        }, 
        {
            "location": "/lc_develop_integration/#antes-de-comecar", 
            "text": "Informa\u00e7\u00f5es B\u00e1sicas  S\u00e3o informa\u00e7\u00f5es b\u00e1sicas e fundamentais para o funcionamento dos exemplos e do processo de autentica\u00e7\u00e3o:   URLs do Login Cidad\u00e3o  URL de Autoriza\u00e7\u00e3o. Exemplo:  https://meu.rs.gov.br/oauth/v2/auth  URL para solicita\u00e7\u00e3o de Access Token. Exemplo:  https://meu.rs.gov.br/oauth/v2/token  URL com os dados do usu\u00e1rio autenticado. Exemplo:  https://meu.rs.gov.br/api/v1/person.json  O conjunto de escopos que ser\u00e3o acessados  Chave p\u00fablica do Client OAuth  Chave privada (ou Secret) do Client OAuth  Precisamos especificar as URLs de Retorno que o gerenciador de identidades esta autorizado a retornar dados.   Tanto as URLs do Login Cidad\u00e3o quanto as chaves de acesso devem ser obtidas na instala\u00e7\u00e3o do Login Cidad\u00e3o na qual voc\u00ea deseja autenticar-se enquanto as URLs de Retorno dependem do seu Client OAuth.  Escopos  Voc\u00ea pode solicitar quantos e quais escopos desejar, entretanto esteja ciente de que quanto mais informa\u00e7\u00f5es voc\u00ea solicitar ao usu\u00e1rio menor ser\u00e1 a probabilidade do mesmo lhe autorizar a receb\u00ea-las, portanto solicite apenas o  absolutamente necess\u00e1rio .  A lista dos escopos suportados pode ser encontrada   aqui  .", 
            "title": "Antes de Come\u00e7ar"
        }, 
        {
            "location": "/lc_develop_integration/#exemplos", 
            "text": "No nosso branch  exemplos  demonstramos a integra\u00e7\u00e3o utilizando  Java ,  PHP 5.2  e  PHP 5.3 .\nEm todos os exemplos \u00e9 necess\u00e1rio ter as   Informa\u00e7\u00f5es B\u00e1sicas  .  Para continuar escolha um dos seguintes exemplos para explicarmos como utilizar a autentica\u00e7\u00e3o:    Exemplo utilizando PHP 5.2    Exemplo utilizando PHP 5.3    Exemplo utilizando Java", 
            "title": "Exemplos"
        }, 
        {
            "location": "/lc_develop_connecting_with_java_aplications/", 
            "text": "Exemplo utilizando Java\n\n\nAntes de Come\u00e7ar\n\n\nCertifique-se de que voc\u00ea tem todos os dados descritos \n aqui \n antes de seguir o tutorial.\n\n\nDepend\u00eancias\n\n\nPara conectar no Login Cidad\u00e3o usando \nJava\n \u00e9 utilizado o cliente OAuth \nApache Oltu\n. Nesse exemplo, ser\u00e1 utilizado o gerenciador de dependencias Maven. Assim, no \npom.xml\n do projeto \u00e9 necessario adicionar as seguintes dependencias:\n\n\n    \nproperties\n\n        \noltu.oauth2.version\n1.0.0\n/oltu.oauth2.version\n\n    \n/properties\n\n    \ndependencies\n\n        \n!-- idm deps --\n\n        \ndependency\n\n            \nartifactId\norg.apache.oltu.oauth2.common\n/artifactId\n\n            \ngroupId\norg.apache.oltu.oauth2\n/groupId\n\n            \nversion\n${oltu.oauth2.version}\n/version\n\n        \n/dependency\n\n        \ndependency\n\n            \ngroupId\norg.apache.oltu.oauth2\n/groupId\n\n            \nartifactId\norg.apache.oltu.oauth2.client\n/artifactId\n\n            \nversion\n${oltu.oauth2.version}\n/version\n\n        \n/dependency\n\n        \ndependency\n\n            \ngroupId\norg.apache.oltu.oauth2\n/groupId\n\n            \nartifactId\norg.apache.oltu.oauth2.jwt\n/artifactId\n\n            \nversion\n${oltu.oauth2.version}\n/version\n\n        \n/dependency\n\n        \ndependency\n\n            \ngroupId\norg.apache.oltu.oauth2\n/groupId\n\n            \nartifactId\norg.apache.oltu.oauth2.dynamicreg.client\n/artifactId\n\n            \nversion\n${oltu.oauth2.version}\n/version\n\n        \n/dependency\n\n        \ndependency\n\n            \ngroupId\norg.apache.oltu.oauth2\n/groupId\n\n            \nartifactId\norg.apache.oltu.oauth2.dynamicreg.common\n/artifactId\n\n            \nversion\n${oltu.oauth2.version}\n/version\n\n        \n/dependency\n       \n        \n!-- json utils --\n\n        \ndependency\n\n            \ngroupId\norg.codehaus.jackson\n/groupId\n\n            \nartifactId\njackson-mapper-asl\n/artifactId\n\n            \nversion\n1.9.13\n/version\n\n        \n/dependency\n       \n    \n/dependencies\n\n\n\n\n\n\nCome\u00e7ando\n\n\nArquivo de configura\u00e7\u00e3o\n\n\nPrimeiramente criamos um arquivo de configura\u00e7\u00e3o \noauth_configuration.properties\n referente ao servidor OAuth que desejamos utilizar. Nesse arquivo, especificamos o tipo de aplica\u00e7\u00e3o que o Apache Oltu utilizar\u00e1, especificamos o endere\u00e7o para fazer a autentica\u00e7\u00e3o, o endere\u00e7o para obter o Access Token, endere\u00e7o para obter os dados do usu\u00e1rio, os escopos desejados, a chave p\u00fablica, a chave privada e o endere\u00e7o para onde o gerenciador de identidades ir\u00e1 retornar os dados :\n\n\n//tipo de aplica\u00e7\u00e3o que o Apache Oltu utilizar\u00e1\napplication=generic\n\n//endere\u00e7o para fazer a autentica\u00e7\u00e3o\nauthz_endpoint=https://meu.rs.gov.br/oauth/v2/auth\n\n//endere\u00e7o para obter a Access Token\ntoken_endpoint=https://meu.rs.gov.br/oauth/v2/token\n\n//endere\u00e7o para obter os dados do usu\u00e1rio\nresource_url=https://meu.rs.gov.br/api/v1/person\n\n//escopos desejados\nscope=\n\n//chave p\u00fablica\nclient_id=\n\n//chave privada\nclient_secret=\n\n//endere\u00e7o para onde o gerenciador de identidades ir\u00e1 retornar dados\nredirect_uri=\n\n\n\n\n\nCriando um filtro de autentica\u00e7\u00e3o\n\n\n\u00c9 necess\u00e1rio criar um filtro utilizando \njavax.servlet.Filter\n. Para isso utilizamos o arquivo \nsrc/main/java/br/gov/rs/meu/helper/AuthFilter.java\n da seguinte forma:\n\n\n// src/main/java/br/gov/rs/meu/helper/AuthFilter.java\n\n\n\n@WebFilter\n(\nurlPatterns\n \n=\n \n{\n \nUtils\n.\nREDIRECT_URI\n \n})\n\n\npublic\n \nclass\n \nAuthFilter\n \nimplements\n \nFilter\n \n{\n\n    \n// ...\n\n\n}\n\n\n\n\n\n\nNa a anota\u00e7\u00e3o \n@WebFilter\n nos adicionamos como um dos endere\u00e7os filtrados o endere\u00e7o para aonde o gerenciador de identidades retornar\u00e1 dados.\n\n\n// src/main/java/br/gov/rs/meu/helper/AuthFilter.java\n\n\n    \npublic\n \nvoid\n \ndoFilter\n(\nServletRequest\n \nrequest\n,\n \nServletResponse\n \nresponse\n,\n\n            \nFilterChain\n \nchain\n)\n \nthrows\n \nIOException\n,\n \nServletException\n \n{\n\n        \ntry\n \n{\n\n            \nHttpServletRequest\n \nreq\n \n=\n \n(\nHttpServletRequest\n)\n \nrequest\n;\n\n            \nHttpServletResponse\n \nres\n \n=\n \n(\nHttpServletResponse\n)\n \nresponse\n;\n\n            \nHttpSession\n \nses\n \n=\n \nreq\n.\ngetSession\n(\nfalse\n);\n\n\n            \n// Guardamos o endere\u00e7o que o usu\u00e1rio est\u00e1 tentando acessar\n\n            \nString\n \nreqURI\n \n=\n \nreq\n.\ngetRequestURI\n();\n\n\n            \n// Verificamos se o usu\u00e1rio j\u00e1 est\u00e1 autenticado nesta aplica\u00e7\u00e3o\n\n            \nif\n \n((\nses\n \n!=\n \nnull\n \n \nses\n.\ngetAttribute\n(\nusername\n)\n \n!=\n \nnull\n)\n \n||\n \nreqURI\n.\ncontains\n(\njavax.faces.resource\n)\n \n||\n \nUtils\n.\ninArray\n(\nreqURI\n,\n \nwhiteList\n))\n \n{\n\n                \nchain\n.\ndoFilter\n(\nrequest\n,\n \nresponse\n);\n\n            \n}\n \nelse\n \n{\n\n                \n// Ele n\u00e3o est\u00e1 autenticado, mas pode estar em processo de autentica\u00e7\u00e3o\n\n                \nif\n \n(\nses\n \n!=\n \nnull\n \n \nses\n.\ngetAttribute\n(\nlc.oauthParams\n)\n \n!=\n \nnull\n)\n \n{\n\n                    \n// Obtemos os par\u00e2metros de autentica\u00e7\u00e3o\n\n                    \nOAuthParams\n \noauthParams\n \n=\n \n(\nOAuthParams\n)\n \nses\n.\ngetAttribute\n(\nlc.oauthParams\n);\n\n                    \nOAuthAuthzResponse\n \noar\n \n=\n \nOAuthAuthzResponse\n.\noauthCodeAuthzResponse\n(\nreq\n);\n\n\n                    \n// e verificamos se recebemos um Authorization Code\n\n                    \noauthParams\n.\nsetAuthzCode\n(\noar\n.\ngetCode\n());\n\n\n                    \n// Solicitamos um Access Token\n\n                    \nUtils\n.\ngetAuthorizationToken\n(\noauthParams\n);\n\n\n                    \n// e, em seguida, solicitamos os dados do usu\u00e1rio\n\n                    \nUtils\n.\ngetResource\n(\noauthParams\n);\n\n\n                    \n// Para simplificar, armazenamos os dados em um Map\n\n                    \n// Naturalmente voc\u00ea deveria desserializar o JSON recebido\n\n                    \n// para um objeto apropriado\n\n                    \nObjectMapper\n \nmapper\n \n=\n \nnew\n \nObjectMapper\n();\n                   \n                    \nMap\nString\n,\n \nObject\n \nperson\n \n=\n \nmapper\n.\nreadValue\n(\n\n                            \noauthParams\n.\ngetResource\n(),\n\n                            \nnew\n \nTypeReference\nMap\nString\n,\n \nObject\n()\n \n{\n\n                            \n});\n\n\n                    \n// Nesse momento j\u00e1 possuimos os dados do usu\u00e1rio\n\n                    \n// \u00c9 nesse ponto que voc\u00ea deve persistir o usu\u00e1rio juntamente com\n\n                    \n// Seus Access e Refresh Tokens\n\n                    \n// Como isto \u00e9 apenas um exemplo vamos apenas salvar na sess\u00e3o\n\n                    \nses\n.\nsetAttribute\n(\nusername\n,\n \nperson\n);\n\n\n                    \n// Encaminhamos o usu\u00e1rio para onde ele tentou ir originalmente\n\n                    \nres\n.\nsendRedirect\n((\nString\n)\n \nses\n.\ngetAttribute\n(\nlc.origTarget\n));\n\n                    \nses\n.\nremoveAttribute\n(\nlc.origTarget\n);\n\n                \n}\n \nelse\n \n{\n\n                    \n// O usu\u00e1rio n\u00e3o est\u00e1 autenticado nem est\u00e1 se autenticando\n\n                    \n// Ent\u00e3o devemos encaminh\u00e1-lo para o gerenciador de identidade\n\n\n                    \n// \u00c9 uma boa pr\u00e1tica salvar a URL que o usu\u00e1rio tentou acessar\n\n                    \n// para encaminh\u00e1-lo depois da autoriza\u00e7\u00e3o e autentica\u00e7\u00e3o.\n\n                    \nString\n \norigTarget\n \n=\n \nUtils\n.\ngetFullRequestURL\n(\nreq\n);\n\n\n                    \n// Preparamos as configura\u00e7\u00f5es do gerenciador de identidade\n\n                    \nOAuthParams\n \noauthParams\n \n=\n \nUtils\n.\nprepareOAuthParams\n(\nreq\n);\n\n                    \nOAuthClientRequest\n \noauthRequest\n \n=\n \nOAuthClientRequest\n\n                            \n.\nauthorizationLocation\n(\n\n                                    \noauthParams\n.\ngetAuthzEndpoint\n())\n\n                            \n.\nsetClientId\n(\noauthParams\n.\ngetClientId\n())\n\n                            \n.\nsetRedirectURI\n(\noauthParams\n.\ngetRedirectUri\n())\n\n                            \n.\nsetResponseType\n(\nResponseType\n.\nCODE\n.\ntoString\n())\n\n                            \n.\nsetScope\n(\noauthParams\n.\ngetScope\n())\n\n                            \n.\nsetState\n(\noauthParams\n.\ngetState\n())\n\n                            \n.\nbuildQueryMessage\n();\n\n\n                    \n// Salvemos na sess\u00e3o as configura\u00e7\u00f5es do gerenciador de identidade\n\n                    \nses\n.\nsetAttribute\n(\nlc.oauthParams\n,\n \noauthParams\n);\n\n                    \nses\n.\nsetAttribute\n(\nlc.origTarget\n,\n \norigTarget\n);\n\n\n                    \n// Redirecionamos o usu\u00e1rio para o gerenciador de identidades\n\n                    \nres\n.\nsendRedirect\n(\noauthRequest\n.\ngetLocationUri\n());\n\n                \n}\n\n            \n}\n\n\n        \n}\n \ncatch\n \n(\nThrowable\n \nt\n)\n \n{\n\n            \nSystem\n.\nout\n.\nprintln\n(\nt\n.\ngetMessage\n());\n\n        \n}\n\n\n    \n}\n\n\n\n\n\n\nNo arquivo \nsrc/main/java/br/gov/rs/meu/helper/Utils.java\n merece explica\u00e7\u00e3o dois metodos: \ngetAuthorizationToken\n e o \ngetResource\n.\nO metodo \ngetAuthorizationToken\n \u00e9 respons\u00e1vel por obter a Access Token:\n\n\npublic\n \nstatic\n \nvoid\n \ngetAuthorizationToken\n(\nOAuthParams\n \noauthParams\n)\n \nthrows\n \nOAuthSystemException\n,\n \nOAuthProblemException\n \n{\n\n    \n//Preparamos as configura\u00e7\u00f5es do gerenciador de identidade\n\n    \nOAuthClientRequest\n \noRequest\n \n=\n \nOAuthClientRequest\n\n            \n.\ntokenLocation\n(\noauthParams\n.\ngetTokenEndpoint\n())\n\n            \n.\nsetClientId\n(\noauthParams\n.\ngetClientId\n())\n\n            \n.\nsetClientSecret\n(\noauthParams\n.\ngetClientSecret\n())\n\n            \n.\nsetRedirectURI\n(\noauthParams\n.\ngetRedirectUri\n())\n\n            \n.\nsetCode\n(\noauthParams\n.\ngetAuthzCode\n())\n\n            \n.\nsetGrantType\n(\nGrantType\n.\nAUTHORIZATION_CODE\n).\nbuildBodyMessage\n();\n\n\n    \nOAuthClient\n \nclient\n \n=\n \nnew\n \nOAuthClient\n(\nnew\n \nURLConnectionClient\n());\n\n\n    \nOAuthAccessTokenResponse\n \noauthResponse\n \n=\n \nnull\n;\n\n    \n//definimos uma classe gen\u00e9rica para receber a Access Token\n\n    \nClass\n?\n \nextends\n \nOAuthAccessTokenResponse\n \ncl\n \n=\n \nOAuthJSONAccessTokenResponse\n.\nclass\n;\n\n    \n//requisitamos ao gerenciador de identidade uma Access Token para\n\n    \noauthResponse\n \n=\n \nclient\n.\naccessToken\n(\noRequest\n,\n \ncl\n);\n\n    \n//salve a Access Token, a Refresh Token e a data de expira\u00e7\u00e3o\n\n    \noauthParams\n.\nsetAccessToken\n(\noauthResponse\n.\ngetAccessToken\n());\n\n    \noauthParams\n.\nsetExpiresIn\n(\noauthResponse\n.\ngetExpiresIn\n());\n\n    \noauthParams\n.\nsetRefreshToken\n(\noauthResponse\n.\ngetRefreshToken\n());\n\n\n}\n\n\n\n\n\n\nO metodo \ngetResource\n \u00e9 respons\u00e1vel por obter os dados do usu\u00e1rio:\n\n\npublic static void getResource(OAuthParams oauthParams) throws OAuthSystemException, OAuthProblemException {\n    OAuthClientRequest request = null;\n    //escolhemos a forma que enviamos a nossa Access Token para o gerenciador de identidades\n    if (Utils.REQUEST_TYPE_QUERY.equals(oauthParams.getRequestType())) {\n        request = new OAuthBearerClientRequest(oauthParams.getResourceUrl())\n                .setAccessToken(oauthParams.getAccessToken())\n                .buildQueryMessage();\n    } else if (Utils.REQUEST_TYPE_HEADER.equals(oauthParams\n            .getRequestType())) {\n        request = new OAuthBearerClientRequest(oauthParams.getResourceUrl())\n                .setAccessToken(oauthParams.getAccessToken())\n                .buildHeaderMessage();\n    } else if (Utils.REQUEST_TYPE_BODY.equals(oauthParams.getRequestType())) {\n        request = new OAuthBearerClientRequest(oauthParams.getResourceUrl())\n                .setAccessToken(oauthParams.getAccessToken())\n                .buildBodyMessage();\n    }\n\n    OAuthClient client = new OAuthClient(new URLConnectionClient());\n    //requisitamos ao gerenciador de identidade os dados do usu\u00e1rio\n    OAuthResourceResponse resourceResponse = client.resource(request,\n            oauthParams.getRequestMethod(), OAuthResourceResponse.class);\n\n    //caso tenha uma resposta positiva do gerenciador de identidade salve a resposta\n    if (resourceResponse.getResponseCode() == 200) {\n        oauthParams.setResource(resourceResponse.getBody());\n    } else {\n        oauthParams.setErrorMessage(\nCould not access resource: \n\n                + resourceResponse.getResponseCode() + \n \n\n                + resourceResponse.getBody());\n    }\n}", 
            "title": "Desenvolvimento com aplica\u00e7\u00f5es Java"
        }, 
        {
            "location": "/lc_develop_connecting_with_java_aplications/#exemplo-utilizando-java", 
            "text": "", 
            "title": "Exemplo utilizando Java"
        }, 
        {
            "location": "/lc_develop_connecting_with_java_aplications/#antes-de-comecar", 
            "text": "Certifique-se de que voc\u00ea tem todos os dados descritos   aqui   antes de seguir o tutorial.  Depend\u00eancias  Para conectar no Login Cidad\u00e3o usando  Java  \u00e9 utilizado o cliente OAuth  Apache Oltu . Nesse exemplo, ser\u00e1 utilizado o gerenciador de dependencias Maven. Assim, no  pom.xml  do projeto \u00e9 necessario adicionar as seguintes dependencias:       properties \n         oltu.oauth2.version 1.0.0 /oltu.oauth2.version \n     /properties \n     dependencies \n         !-- idm deps -- \n         dependency \n             artifactId org.apache.oltu.oauth2.common /artifactId \n             groupId org.apache.oltu.oauth2 /groupId \n             version ${oltu.oauth2.version} /version \n         /dependency \n         dependency \n             groupId org.apache.oltu.oauth2 /groupId \n             artifactId org.apache.oltu.oauth2.client /artifactId \n             version ${oltu.oauth2.version} /version \n         /dependency \n         dependency \n             groupId org.apache.oltu.oauth2 /groupId \n             artifactId org.apache.oltu.oauth2.jwt /artifactId \n             version ${oltu.oauth2.version} /version \n         /dependency \n         dependency \n             groupId org.apache.oltu.oauth2 /groupId \n             artifactId org.apache.oltu.oauth2.dynamicreg.client /artifactId \n             version ${oltu.oauth2.version} /version \n         /dependency \n         dependency \n             groupId org.apache.oltu.oauth2 /groupId \n             artifactId org.apache.oltu.oauth2.dynamicreg.common /artifactId \n             version ${oltu.oauth2.version} /version \n         /dependency        \n         !-- json utils -- \n         dependency \n             groupId org.codehaus.jackson /groupId \n             artifactId jackson-mapper-asl /artifactId \n             version 1.9.13 /version \n         /dependency        \n     /dependencies", 
            "title": "Antes de Come\u00e7ar"
        }, 
        {
            "location": "/lc_develop_connecting_with_java_aplications/#comecando", 
            "text": "Arquivo de configura\u00e7\u00e3o  Primeiramente criamos um arquivo de configura\u00e7\u00e3o  oauth_configuration.properties  referente ao servidor OAuth que desejamos utilizar. Nesse arquivo, especificamos o tipo de aplica\u00e7\u00e3o que o Apache Oltu utilizar\u00e1, especificamos o endere\u00e7o para fazer a autentica\u00e7\u00e3o, o endere\u00e7o para obter o Access Token, endere\u00e7o para obter os dados do usu\u00e1rio, os escopos desejados, a chave p\u00fablica, a chave privada e o endere\u00e7o para onde o gerenciador de identidades ir\u00e1 retornar os dados :  //tipo de aplica\u00e7\u00e3o que o Apache Oltu utilizar\u00e1\napplication=generic\n\n//endere\u00e7o para fazer a autentica\u00e7\u00e3o\nauthz_endpoint=https://meu.rs.gov.br/oauth/v2/auth\n\n//endere\u00e7o para obter a Access Token\ntoken_endpoint=https://meu.rs.gov.br/oauth/v2/token\n\n//endere\u00e7o para obter os dados do usu\u00e1rio\nresource_url=https://meu.rs.gov.br/api/v1/person\n\n//escopos desejados\nscope=\n\n//chave p\u00fablica\nclient_id=\n\n//chave privada\nclient_secret=\n\n//endere\u00e7o para onde o gerenciador de identidades ir\u00e1 retornar dados\nredirect_uri=  Criando um filtro de autentica\u00e7\u00e3o  \u00c9 necess\u00e1rio criar um filtro utilizando  javax.servlet.Filter . Para isso utilizamos o arquivo  src/main/java/br/gov/rs/meu/helper/AuthFilter.java  da seguinte forma:  // src/main/java/br/gov/rs/meu/helper/AuthFilter.java  @WebFilter ( urlPatterns   =   {   Utils . REDIRECT_URI   })  public   class   AuthFilter   implements   Filter   { \n     // ...  }   Na a anota\u00e7\u00e3o  @WebFilter  nos adicionamos como um dos endere\u00e7os filtrados o endere\u00e7o para aonde o gerenciador de identidades retornar\u00e1 dados.  // src/main/java/br/gov/rs/meu/helper/AuthFilter.java \n\n     public   void   doFilter ( ServletRequest   request ,   ServletResponse   response , \n             FilterChain   chain )   throws   IOException ,   ServletException   { \n         try   { \n             HttpServletRequest   req   =   ( HttpServletRequest )   request ; \n             HttpServletResponse   res   =   ( HttpServletResponse )   response ; \n             HttpSession   ses   =   req . getSession ( false ); \n\n             // Guardamos o endere\u00e7o que o usu\u00e1rio est\u00e1 tentando acessar \n             String   reqURI   =   req . getRequestURI (); \n\n             // Verificamos se o usu\u00e1rio j\u00e1 est\u00e1 autenticado nesta aplica\u00e7\u00e3o \n             if   (( ses   !=   null     ses . getAttribute ( username )   !=   null )   ||   reqURI . contains ( javax.faces.resource )   ||   Utils . inArray ( reqURI ,   whiteList ))   { \n                 chain . doFilter ( request ,   response ); \n             }   else   { \n                 // Ele n\u00e3o est\u00e1 autenticado, mas pode estar em processo de autentica\u00e7\u00e3o \n                 if   ( ses   !=   null     ses . getAttribute ( lc.oauthParams )   !=   null )   { \n                     // Obtemos os par\u00e2metros de autentica\u00e7\u00e3o \n                     OAuthParams   oauthParams   =   ( OAuthParams )   ses . getAttribute ( lc.oauthParams ); \n                     OAuthAuthzResponse   oar   =   OAuthAuthzResponse . oauthCodeAuthzResponse ( req ); \n\n                     // e verificamos se recebemos um Authorization Code \n                     oauthParams . setAuthzCode ( oar . getCode ()); \n\n                     // Solicitamos um Access Token \n                     Utils . getAuthorizationToken ( oauthParams ); \n\n                     // e, em seguida, solicitamos os dados do usu\u00e1rio \n                     Utils . getResource ( oauthParams ); \n\n                     // Para simplificar, armazenamos os dados em um Map \n                     // Naturalmente voc\u00ea deveria desserializar o JSON recebido \n                     // para um objeto apropriado \n                     ObjectMapper   mapper   =   new   ObjectMapper ();                    \n                     Map String ,   Object   person   =   mapper . readValue ( \n                             oauthParams . getResource (), \n                             new   TypeReference Map String ,   Object ()   { \n                             }); \n\n                     // Nesse momento j\u00e1 possuimos os dados do usu\u00e1rio \n                     // \u00c9 nesse ponto que voc\u00ea deve persistir o usu\u00e1rio juntamente com \n                     // Seus Access e Refresh Tokens \n                     // Como isto \u00e9 apenas um exemplo vamos apenas salvar na sess\u00e3o \n                     ses . setAttribute ( username ,   person ); \n\n                     // Encaminhamos o usu\u00e1rio para onde ele tentou ir originalmente \n                     res . sendRedirect (( String )   ses . getAttribute ( lc.origTarget )); \n                     ses . removeAttribute ( lc.origTarget ); \n                 }   else   { \n                     // O usu\u00e1rio n\u00e3o est\u00e1 autenticado nem est\u00e1 se autenticando \n                     // Ent\u00e3o devemos encaminh\u00e1-lo para o gerenciador de identidade \n\n                     // \u00c9 uma boa pr\u00e1tica salvar a URL que o usu\u00e1rio tentou acessar \n                     // para encaminh\u00e1-lo depois da autoriza\u00e7\u00e3o e autentica\u00e7\u00e3o. \n                     String   origTarget   =   Utils . getFullRequestURL ( req ); \n\n                     // Preparamos as configura\u00e7\u00f5es do gerenciador de identidade \n                     OAuthParams   oauthParams   =   Utils . prepareOAuthParams ( req ); \n                     OAuthClientRequest   oauthRequest   =   OAuthClientRequest \n                             . authorizationLocation ( \n                                     oauthParams . getAuthzEndpoint ()) \n                             . setClientId ( oauthParams . getClientId ()) \n                             . setRedirectURI ( oauthParams . getRedirectUri ()) \n                             . setResponseType ( ResponseType . CODE . toString ()) \n                             . setScope ( oauthParams . getScope ()) \n                             . setState ( oauthParams . getState ()) \n                             . buildQueryMessage (); \n\n                     // Salvemos na sess\u00e3o as configura\u00e7\u00f5es do gerenciador de identidade \n                     ses . setAttribute ( lc.oauthParams ,   oauthParams ); \n                     ses . setAttribute ( lc.origTarget ,   origTarget ); \n\n                     // Redirecionamos o usu\u00e1rio para o gerenciador de identidades \n                     res . sendRedirect ( oauthRequest . getLocationUri ()); \n                 } \n             } \n\n         }   catch   ( Throwable   t )   { \n             System . out . println ( t . getMessage ()); \n         } \n\n     }   No arquivo  src/main/java/br/gov/rs/meu/helper/Utils.java  merece explica\u00e7\u00e3o dois metodos:  getAuthorizationToken  e o  getResource .\nO metodo  getAuthorizationToken  \u00e9 respons\u00e1vel por obter a Access Token:  public   static   void   getAuthorizationToken ( OAuthParams   oauthParams )   throws   OAuthSystemException ,   OAuthProblemException   { \n     //Preparamos as configura\u00e7\u00f5es do gerenciador de identidade \n     OAuthClientRequest   oRequest   =   OAuthClientRequest \n             . tokenLocation ( oauthParams . getTokenEndpoint ()) \n             . setClientId ( oauthParams . getClientId ()) \n             . setClientSecret ( oauthParams . getClientSecret ()) \n             . setRedirectURI ( oauthParams . getRedirectUri ()) \n             . setCode ( oauthParams . getAuthzCode ()) \n             . setGrantType ( GrantType . AUTHORIZATION_CODE ). buildBodyMessage (); \n\n     OAuthClient   client   =   new   OAuthClient ( new   URLConnectionClient ()); \n\n     OAuthAccessTokenResponse   oauthResponse   =   null ; \n     //definimos uma classe gen\u00e9rica para receber a Access Token \n     Class ?   extends   OAuthAccessTokenResponse   cl   =   OAuthJSONAccessTokenResponse . class ; \n     //requisitamos ao gerenciador de identidade uma Access Token para \n     oauthResponse   =   client . accessToken ( oRequest ,   cl ); \n     //salve a Access Token, a Refresh Token e a data de expira\u00e7\u00e3o \n     oauthParams . setAccessToken ( oauthResponse . getAccessToken ()); \n     oauthParams . setExpiresIn ( oauthResponse . getExpiresIn ()); \n     oauthParams . setRefreshToken ( oauthResponse . getRefreshToken ());  }   O metodo  getResource  \u00e9 respons\u00e1vel por obter os dados do usu\u00e1rio:  public static void getResource(OAuthParams oauthParams) throws OAuthSystemException, OAuthProblemException {\n    OAuthClientRequest request = null;\n    //escolhemos a forma que enviamos a nossa Access Token para o gerenciador de identidades\n    if (Utils.REQUEST_TYPE_QUERY.equals(oauthParams.getRequestType())) {\n        request = new OAuthBearerClientRequest(oauthParams.getResourceUrl())\n                .setAccessToken(oauthParams.getAccessToken())\n                .buildQueryMessage();\n    } else if (Utils.REQUEST_TYPE_HEADER.equals(oauthParams\n            .getRequestType())) {\n        request = new OAuthBearerClientRequest(oauthParams.getResourceUrl())\n                .setAccessToken(oauthParams.getAccessToken())\n                .buildHeaderMessage();\n    } else if (Utils.REQUEST_TYPE_BODY.equals(oauthParams.getRequestType())) {\n        request = new OAuthBearerClientRequest(oauthParams.getResourceUrl())\n                .setAccessToken(oauthParams.getAccessToken())\n                .buildBodyMessage();\n    }\n\n    OAuthClient client = new OAuthClient(new URLConnectionClient());\n    //requisitamos ao gerenciador de identidade os dados do usu\u00e1rio\n    OAuthResourceResponse resourceResponse = client.resource(request,\n            oauthParams.getRequestMethod(), OAuthResourceResponse.class);\n\n    //caso tenha uma resposta positiva do gerenciador de identidade salve a resposta\n    if (resourceResponse.getResponseCode() == 200) {\n        oauthParams.setResource(resourceResponse.getBody());\n    } else {\n        oauthParams.setErrorMessage( Could not access resource:  \n                + resourceResponse.getResponseCode() +    \n                + resourceResponse.getBody());\n    }\n}", 
            "title": "Come\u00e7ando"
        }, 
        {
            "location": "/lc_develop_connecting_with_php5.2_applications/", 
            "text": "Exemplo utilizando PHP 5.2\n\n\nAntes de Come\u00e7ar\n\n\nCertifique-se de que voc\u00ea tem todos os dados descritos \n aqui \n antes de seguir o tutorial.\n\n\nDepend\u00eancias\n\n\nPara conectar no Login Cidad\u00e3o usando \nPHP 5.2\n utilizamos o cliente OAuth disponibilizado pelo site \nPHPCLASSES\n.\nEssa implementa\u00e7\u00e3o tem como depend\u00eancia a classe \nhttp-client\n tamb\u00e9m dispon\u00edvel pelo site \nPHPCLASSES\n.\n\n\nCome\u00e7ando\n\n\nArquivo de configura\u00e7\u00e3o\n\n\nPrimeiramente criamos um arquivo de configura\u00e7\u00e3o \noauth_configuration.json\n referente ao servidor OAuth que desejamos utilizar. Nesse arquivo, especificamos a vers\u00e3o do protocolo OAuth, o endere\u00e7o para fazer a autentica\u00e7\u00e3o, com marcadores para fazer substitui\u00e7\u00f5es de vari\u00e1veis, e o endere\u00e7o para obter o Access Token:\n\n\n// oauth_configuration.json\n\n\n{\n\n    \nservers\n:\n\n    \n{\n\n        \n// ATEN\u00c7\u00c3O: Voc\u00ea dever\u00e1 informar esse nome na pr\u00f3xima etapa, em $client-\nserver\n\n        \nMeu\n:\n\n        \n{\n\n            \noauth_version\n:\n \n2.0\n,\n\n            \ndialog_url\n:\n \nhttps://meu.rs.gov.br/oauth/v2/auth?response_type=code\nclient_id={CLIENT_ID}\nredirect_uri={REDIRECT_URI}\nstate={STATE}\nscope={SCOPE}\n,\n\n            \naccess_token_url\n:\n \nhttps://meu.rs.gov.br/oauth/v2/token\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nConfigurando o Client OAuth\n\n\nPrimeiro instanciamos a classe \noauth_client_class\n:\n\n\n$client = new oauth_client_class();\n\n\n//aqui especificamos o nome do servidor que vamos utilizar. Isso carregar as configura\u00e7\u00f5es extras do cliente OAuth\n\n\n$client-\nserver = \nMeu\n;\n\n\n//colocamos um dos nossos endere\u00e7os que autorizamos o Login Cidad\u00e3o a retornar dados\n\n\n$client-\nredirect_uri = \n;\n\n\n//colocamos nossa chave p\u00fablica aqui\n\n\n$client-\nclient_id = \n;\n\n\n//colocamos nossa chave privada aqui\n\n\n$client-\nclient_secret = \n;\n\n\n//colocamos a lista de escopos desejados *separados por espa\u00e7os*\n\n\n$client-\nscope = \n;\n\n\n\n\n\n\nPor padr\u00e3o, o arquivo de configura\u00e7\u00e3o deve ser colocado no mesmo diret\u00f3rio que o nosso script est\u00e1 rodando, todavia \u00e9 poss\u00edvel mudar esse diret\u00f3rio atrav\u00e9s do seguinte atributo:\n\n\n$client-\nconfiguration_file=\n;\n\n\n\n\n\n\nFazendo a m\u00e1gica acontecer\n\n\nCom os dados preenchidos, podemos inicializar a inst\u00e2ncia:\n\n\n// aqui a classe vai carregar as informa\u00e7\u00f5es extras do servidor\n\n\nif (($success = $client-\nInitialize())) {\n\n\n    // aqui ele vai processar os dados do $_REQUEST para descobrir se precisa realizar a autoriza\u00e7\u00e3o no gerenciador de identidades e/ou solicitar um Access Token\n\n\n    if (($success = $client-\nProcess())) {\n\n\n        if (strlen($client-\nauthorization_error)) {\n\n\n            $client-\nerror = $client-\nauthorization_error;\n\n\n            $success = false;\n\n\n        } elseif (strlen($client-\naccess_token)) {\n\n\n            // quando conseguimos o Access Token podemos pegar os dados \n\n\n            $success = $client-\nCallAPI(\nhttps://meu.rs.gov.br/api/v1/person\n, \nGET\n, array(), array(\n\n\n                \nFailOnAccessError\n =\n true\n\n\n            ), $user);\n\n\n        }\n\n\n    }\n\n\n    // aqui ele retorna o status das opera\u00e7\u00f5es realizadas pela inst\u00e2ncia\n\n\n    $success = $client-\nFinalize($success);\n\n\n}\n\n\n// caso a classe precise encerrar a execu\u00e7\u00e3o desta pagina como, por exemplo, quando o gerenciador de identidades retorna dados para essa pagina, apos solicitar a autoriza\u00e7\u00e3o\n\n\nif ($client-\nexit) {\n\n\n    exit();\n\n\n}\n\n\n\n\n\n\nUma vez obtido o Access Token podemos pegar os dados do usu\u00e1rio atrav\u00e9s da vari\u00e1vel \n$user\n que estar\u00e1 populada com as informa\u00e7\u00f5es solicitadas na propriedade \nscope\n.", 
            "title": "Desenvolvimento com aplica\u00e7\u00f5es php 5.2"
        }, 
        {
            "location": "/lc_develop_connecting_with_php5.2_applications/#exemplo-utilizando-php-52", 
            "text": "", 
            "title": "Exemplo utilizando PHP 5.2"
        }, 
        {
            "location": "/lc_develop_connecting_with_php5.2_applications/#antes-de-comecar", 
            "text": "Certifique-se de que voc\u00ea tem todos os dados descritos   aqui   antes de seguir o tutorial.  Depend\u00eancias  Para conectar no Login Cidad\u00e3o usando  PHP 5.2  utilizamos o cliente OAuth disponibilizado pelo site  PHPCLASSES .\nEssa implementa\u00e7\u00e3o tem como depend\u00eancia a classe  http-client  tamb\u00e9m dispon\u00edvel pelo site  PHPCLASSES .", 
            "title": "Antes de Come\u00e7ar"
        }, 
        {
            "location": "/lc_develop_connecting_with_php5.2_applications/#comecando", 
            "text": "Arquivo de configura\u00e7\u00e3o  Primeiramente criamos um arquivo de configura\u00e7\u00e3o  oauth_configuration.json  referente ao servidor OAuth que desejamos utilizar. Nesse arquivo, especificamos a vers\u00e3o do protocolo OAuth, o endere\u00e7o para fazer a autentica\u00e7\u00e3o, com marcadores para fazer substitui\u00e7\u00f5es de vari\u00e1veis, e o endere\u00e7o para obter o Access Token:  // oauth_configuration.json  { \n     servers : \n     { \n         // ATEN\u00c7\u00c3O: Voc\u00ea dever\u00e1 informar esse nome na pr\u00f3xima etapa, em $client- server \n         Meu : \n         { \n             oauth_version :   2.0 , \n             dialog_url :   https://meu.rs.gov.br/oauth/v2/auth?response_type=code client_id={CLIENT_ID} redirect_uri={REDIRECT_URI} state={STATE} scope={SCOPE} , \n             access_token_url :   https://meu.rs.gov.br/oauth/v2/token \n         } \n     }  }   Configurando o Client OAuth  Primeiro instanciamos a classe  oauth_client_class :  $client = new oauth_client_class();  //aqui especificamos o nome do servidor que vamos utilizar. Isso carregar as configura\u00e7\u00f5es extras do cliente OAuth  $client- server =  Meu ;  //colocamos um dos nossos endere\u00e7os que autorizamos o Login Cidad\u00e3o a retornar dados  $client- redirect_uri =  ;  //colocamos nossa chave p\u00fablica aqui  $client- client_id =  ;  //colocamos nossa chave privada aqui  $client- client_secret =  ;  //colocamos a lista de escopos desejados *separados por espa\u00e7os*  $client- scope =  ;   Por padr\u00e3o, o arquivo de configura\u00e7\u00e3o deve ser colocado no mesmo diret\u00f3rio que o nosso script est\u00e1 rodando, todavia \u00e9 poss\u00edvel mudar esse diret\u00f3rio atrav\u00e9s do seguinte atributo:  $client- configuration_file= ;   Fazendo a m\u00e1gica acontecer  Com os dados preenchidos, podemos inicializar a inst\u00e2ncia:  // aqui a classe vai carregar as informa\u00e7\u00f5es extras do servidor  if (($success = $client- Initialize())) {      // aqui ele vai processar os dados do $_REQUEST para descobrir se precisa realizar a autoriza\u00e7\u00e3o no gerenciador de identidades e/ou solicitar um Access Token      if (($success = $client- Process())) {          if (strlen($client- authorization_error)) {              $client- error = $client- authorization_error;              $success = false;          } elseif (strlen($client- access_token)) {              // quando conseguimos o Access Token podemos pegar os dados               $success = $client- CallAPI( https://meu.rs.gov.br/api/v1/person ,  GET , array(), array(                   FailOnAccessError  =  true              ), $user);          }      }      // aqui ele retorna o status das opera\u00e7\u00f5es realizadas pela inst\u00e2ncia      $success = $client- Finalize($success);  }  // caso a classe precise encerrar a execu\u00e7\u00e3o desta pagina como, por exemplo, quando o gerenciador de identidades retorna dados para essa pagina, apos solicitar a autoriza\u00e7\u00e3o  if ($client- exit) {      exit();  }   Uma vez obtido o Access Token podemos pegar os dados do usu\u00e1rio atrav\u00e9s da vari\u00e1vel  $user  que estar\u00e1 populada com as informa\u00e7\u00f5es solicitadas na propriedade  scope .", 
            "title": "Come\u00e7ando"
        }, 
        {
            "location": "/lc_develop_connecting_with_php5.3_applications/", 
            "text": "Exemplo utilizando PHP 5.3\n\n\nAntes de Come\u00e7ar\n\n\nCertifique-se de que voc\u00ea tem todos os dados descritos \n aqui \n antes de seguir o tutorial.\n\n\nDepend\u00eancias\n\n\nPara conectar no Login Cidad\u00e3o usando \nPHP 5.3\n \u00e9 utilizado o cliente OAuth desenvolvido pelo \nfkooman\n. Uma vez que \u00e9 usado php5.3 \u00e9 possivel usar o \ncomposer\n para instalar o componente e suas dependecias. Primeiramente, \u00e9 necessario instalar o \ncomposer\n.\nNo arquivo \ncomposer.json\n basta adicionar a seguinte configura\u00e7\u00e3o:\n\n\n{\n\n    \nname\n:\n \nfkooman/php-oauth-client-example\n,\n \n    \nrequire\n:\n \n{\n\n        \nfkooman/guzzle-bearer-auth-plugin\n:\n \ndev-master\n,\n \n        \nfkooman/php-oauth-client\n:\n \ndev-master\n\n    \n}\n\n\n}\n\n\n\n\n\n\nUtilizando a linha de comando, no mesmo diretorio que esta o arquivo \ncomposer.json\n \u00e9 possivel executar o seguinte comando: \ncomposer install --prefer-dist\n. Assim o \ncomposer\n instalar\u00e1 o componente desejado e suas dependencias.\n\n\nCome\u00e7ando\n\n\nArquivo de configura\u00e7\u00e3o\n\n\nPrimeiramente criamos um arquivo de configura\u00e7\u00e3o \nconfig.ini\n referente ao servidor OAuth que desejamos utilizar. Nesse arquivo, especificamos o endere\u00e7o para fazer a autentica\u00e7\u00e3o, o endere\u00e7o para obter o Access Token, o endere\u00e7o para onde o gerenciador de identidades ir\u00e1 retornar os dados, a chave p\u00fablica, a chave privada, o nome do servidor, os escopos desejados e o endere\u00e7o para obter os dados do usu\u00e1rio:\n\n\n[fkooman_client_config]\n\n\n//endere\u00e7o\n \npara\n \nfazer\n \na\n \nautentica\u00e7\u00e3o\n\n\nauthorize_endpoint\n \n=\n \nhttps://meu.rs.gov.br/oauth/v2/auth\n;\n\n\n//endere\u00e7o\n \npara\n \nrequerer\n \no\n \nAccess\n \nToken\n\n\ntoken_endpoint\n \n=\n \nhttps://meu.rs.gov.br/oauth/v2/token\n;\n\n\n//endere\u00e7o\n \npara\n \nretornar\n \nos\n \ndados\n\n\nredirect_uri\n \n=\n \nhttp://localhost/callback.php\n;\n\n\n//chave\n \np\u00fablica\n\n\nclient_id\n \n=\n \n;\n\n\n//chave\n \nprivada\n\n\nclient_secret\n \n=\n \n;\n\n\n\n[fkooman_api_config]\n\n\n//nome\n \ndo\n \nservidor\n\n\napi_context\n \n=\n \nMeu\n\n\n//escopos\n\n\napi_scopes\n \n=\n \nid username full_name cpf birthdate email city picture public_profile badges country state city addresses id_cards get_all_notifications notifications cep mobile\n;\n\n\n//endere\u00e7o\n \npara\n \nrequerer\n \nos\n \ndados\n \ndo\n \nusu\u00e1rio\n\n\napi_url\n \n=\n \nhttps://meu.rs.gov.br/api/v1/person.json\n;\n\n\n\n\n\n\nCriando um script de autentica\u00e7\u00e3o\n\n\n\u00c9 necess\u00e1rio criar um script que oferece a possibilidade do usuario autenticar. Esse script tem que testar se o usu\u00e1rio ja esta autenticado. No momento que o script detectar que o usu\u00e1rio esta autenticado, ele que pegar as informa\u00e7\u00e3o sobre esse usu\u00e1rio.\n\n\n//primeiro carregamos as configura\u00e7\u00f5es\n\n\n$config = parse_ini_file(\nconfig.ini\n);\n\n\nif (false === $config) {\n\n\n    die(\nplease you need to have a config.ini file. Make one based on config.ini.dist\n);\n\n\n}\n\n\n//com as configura\u00e7\u00f5es \u00e9 criado um inst\u00e2ncia das configura\u00e7\u00f5es do cliente\n\n\n$clientConfig = new \\fkooman\\OAuth\\Client\\ClientConfig($config);\n\n\n\n//criamos uma inst\u00e2ncia para armazenar os dados utilizados pelo Oauth\n\n\n$tokenStorage = new \\fkooman\\OAuth\\Client\\SessionStorage();\n\n\n//criamos uma inst\u00e2ncia para fazer a comunica\u00e7\u00e3o http\n\n\n$httpClient = new \\Guzzle\\Http\\Client();\n\n\n//criamos uma inst\u00e2ncia para utilizar a API do nosso gerenciador de identidades \n\n\n$api = new fkooman\\OAuth\\Client\\Api($config[\napi_context\n], $clientConfig, $tokenStorage, $httpClient);\n\n\n//configuramos o contexto da nossa API\n\n\n$context = new \\fkooman\\OAuth\\Client\\Context($config[\napi_context\n], explode(\n \n, $config[\napi_scopes\n]));\n\n\n//verificamos se j\u00e1 temos uma Access Token\n\n\n$accessToken = $api-\ngetAccessToken($context);\n\n\nif (false === $accessToken) {\n\n\n    //caso n\u00e3o tenhamos uma Access Token\n\n\n    //se temos uma vari\u00e1vel indicando que desejamos autenticar\n\n\n    if ($_GET[\nauthorize\n] == 1) {        \n\n\n        //enviamos o usuario para a tela de autoriza\u00e7\u00e3o do gerenciador de identidades    \n\n\n        header(\nHTTP/1.1 302 Found\n);\n\n\n        header(\nLocation: \n . $api-\ngetAuthorizeUri($context));\n\n\n    } else {\n\n\n        //oferecemos a autentica\u00e7\u00e3o para o usu\u00e1rio\n\n\n        echo \na href=\nindex.php?authorize=1\nLogar com o Login do Cidadao\n/a\n;\n\n\n    }\n\n\n    exit;\n\n\n} else {\n\n\n    //caso tenhamos a Access token podemos consultar a API e obter os dados dele\n\n\n    try {\n\n\n        $client = new \\Guzzle\\Http\\Client();\n\n\n        $bearerAuth = new \\fkooman\\Guzzle\\Plugin\\BearerAuth\\BearerAuth($accessToken-\ngetAccessToken());\n\n\n        $client-\naddSubscriber($bearerAuth);\n\n\n        $response = $client-\nget($config[\napi_url\n])-\nsend();\n\n\n        header(\nContent-Type: application/json\n);\n\n\n        //o retorno da API \u00e9 um no formato JSON, por isso temos que decodifica-la\n\n\n        $json = json_decode($response-\ngetBody(), true);\n\n\n        if (false !== $json) {\n\n\n            print_r($json);\n\n\n        } else {\n\n\n            print_r($response-\ngetBody());\n\n\n        }\n\n\n    } catch (\\fkooman\\Guzzle\\Plugin\\BearerAuth\\Exception\\BearerErrorResponseException $e) {\n\n\n        //caso tenhamos um erro de token inv\u00e1lida, jogamos essa token fora, tentamos autenticar novamente\n\n\n        if (\ninvalid_token\n === $e-\ngetBearerReason()) {            \n\n\n            $api-\ndeleteAccessToken($context);\n\n\n            $api-\ndeleteRefreshToken($context);            \n\n\n            header(\nHTTP/1.1 302 Found\n);\n\n\n            header(\nLocation: \n . $api-\ngetAuthorizeUri($context));\n\n\n            exit;\n\n\n        }\n\n\n        throw $e;\n\n\n    } catch (\\Exception $e) {\n\n\n        die(sprintf(\nERROR: %s\n, $e-\ngetMessage()));\n\n\n    }    \n\n\n}\n\n\n\n}\n\n\n\n\n\n\nCriando um script que recebe o retorno do gerenciador de identidades\n\n\nTamb\u00e9m \u00e9 necessario criar um script que recebe os dados de retorno do gerenciador de identidades. Esse script quando receber os dados do servidor deve encaminhar para o script de autentica\u00e7\u00e3o\n\n\n//primeiro carregamos as configura\u00e7\u00f5es\n\n\n$config = parse_ini_file(\nconfig.ini\n);\n\n\nif (false === $config) {\n\n\n    die(\nplease you need to have a config.ini file. Make one based on config.ini.dist\n);\n\n\n}\n\n\n//com as configura\u00e7\u00f5es \u00e9 criado um inst\u00e2ncia das configura\u00e7\u00f5es do cliente\n\n\n$clientConfig = new \\fkooman\\OAuth\\Client\\ClientConfig($config);\n\n\ntry {\n\n\n    //criamos uma inst\u00e2ncia para armazenar os dados utilizados pelo Oauth\n\n\n    $tokenStorage = new \\fkooman\\OAuth\\Client\\SessionStorage();\n\n\n    //criamos uma inst\u00e2ncia para fazer a comunica\u00e7\u00e3o http\n\n\n    $httpClient = new \\Guzzle\\Http\\Client();\n\n\n    //criamos uma inst\u00e2ncia para lidar com o retorno do gerenciador de identidades\n\n\n    $cb = new \\fkooman\\OAuth\\Client\\Callback($config[\napi_context\n], $clientConfig, $tokenStorage, $httpClient);    \n\n\n    $cb-\nhandleCallback($_GET);\n\n\n    //direcionamos para o script de autentica\u00e7\u00e3o\n\n\n    header(\nHTTP/1.1 302 Found\n);\n\n\n    header(\nLocation: index.php\n);\n\n\n    exit;\n\n\n} catch (\\fkooman\\OAuth\\Client\\AuthorizeException $e) {\n\n\n    die(sprintf(\nERROR: %s, DESCRIPTION: %s\n, $e-\ngetMessage(), $e-\ngetDescription()));\n\n\n} catch (\\Exception $e) {\n\n\n    die(sprintf(\nERROR: %s\n, $e-\ngetMessage()));\n\n\n}\n\n\n\n\n\n\nCom esses dois script \u00e9 possivel autenticar o usu\u00e1rio e recuperar suas informa\u00e7\u00f5es do gerenciador de identidades", 
            "title": "Desenvolvimento com aplica\u00e7\u00f5es php 5.3"
        }, 
        {
            "location": "/lc_develop_connecting_with_php5.3_applications/#exemplo-utilizando-php-53", 
            "text": "", 
            "title": "Exemplo utilizando PHP 5.3"
        }, 
        {
            "location": "/lc_develop_connecting_with_php5.3_applications/#antes-de-comecar", 
            "text": "Certifique-se de que voc\u00ea tem todos os dados descritos   aqui   antes de seguir o tutorial.  Depend\u00eancias  Para conectar no Login Cidad\u00e3o usando  PHP 5.3  \u00e9 utilizado o cliente OAuth desenvolvido pelo  fkooman . Uma vez que \u00e9 usado php5.3 \u00e9 possivel usar o  composer  para instalar o componente e suas dependecias. Primeiramente, \u00e9 necessario instalar o  composer .\nNo arquivo  composer.json  basta adicionar a seguinte configura\u00e7\u00e3o:  { \n     name :   fkooman/php-oauth-client-example ,  \n     require :   { \n         fkooman/guzzle-bearer-auth-plugin :   dev-master ,  \n         fkooman/php-oauth-client :   dev-master \n     }  }   Utilizando a linha de comando, no mesmo diretorio que esta o arquivo  composer.json  \u00e9 possivel executar o seguinte comando:  composer install --prefer-dist . Assim o  composer  instalar\u00e1 o componente desejado e suas dependencias.", 
            "title": "Antes de Come\u00e7ar"
        }, 
        {
            "location": "/lc_develop_connecting_with_php5.3_applications/#comecando", 
            "text": "Arquivo de configura\u00e7\u00e3o  Primeiramente criamos um arquivo de configura\u00e7\u00e3o  config.ini  referente ao servidor OAuth que desejamos utilizar. Nesse arquivo, especificamos o endere\u00e7o para fazer a autentica\u00e7\u00e3o, o endere\u00e7o para obter o Access Token, o endere\u00e7o para onde o gerenciador de identidades ir\u00e1 retornar os dados, a chave p\u00fablica, a chave privada, o nome do servidor, os escopos desejados e o endere\u00e7o para obter os dados do usu\u00e1rio:  [fkooman_client_config]  //endere\u00e7o   para   fazer   a   autentica\u00e7\u00e3o  authorize_endpoint   =   https://meu.rs.gov.br/oauth/v2/auth ;  //endere\u00e7o   para   requerer   o   Access   Token  token_endpoint   =   https://meu.rs.gov.br/oauth/v2/token ;  //endere\u00e7o   para   retornar   os   dados  redirect_uri   =   http://localhost/callback.php ;  //chave   p\u00fablica  client_id   =   ;  //chave   privada  client_secret   =   ;  [fkooman_api_config]  //nome   do   servidor  api_context   =   Meu  //escopos  api_scopes   =   id username full_name cpf birthdate email city picture public_profile badges country state city addresses id_cards get_all_notifications notifications cep mobile ;  //endere\u00e7o   para   requerer   os   dados   do   usu\u00e1rio  api_url   =   https://meu.rs.gov.br/api/v1/person.json ;   Criando um script de autentica\u00e7\u00e3o  \u00c9 necess\u00e1rio criar um script que oferece a possibilidade do usuario autenticar. Esse script tem que testar se o usu\u00e1rio ja esta autenticado. No momento que o script detectar que o usu\u00e1rio esta autenticado, ele que pegar as informa\u00e7\u00e3o sobre esse usu\u00e1rio.  //primeiro carregamos as configura\u00e7\u00f5es  $config = parse_ini_file( config.ini );  if (false === $config) {      die( please you need to have a config.ini file. Make one based on config.ini.dist );  }  //com as configura\u00e7\u00f5es \u00e9 criado um inst\u00e2ncia das configura\u00e7\u00f5es do cliente  $clientConfig = new \\fkooman\\OAuth\\Client\\ClientConfig($config);  //criamos uma inst\u00e2ncia para armazenar os dados utilizados pelo Oauth  $tokenStorage = new \\fkooman\\OAuth\\Client\\SessionStorage();  //criamos uma inst\u00e2ncia para fazer a comunica\u00e7\u00e3o http  $httpClient = new \\Guzzle\\Http\\Client();  //criamos uma inst\u00e2ncia para utilizar a API do nosso gerenciador de identidades   $api = new fkooman\\OAuth\\Client\\Api($config[ api_context ], $clientConfig, $tokenStorage, $httpClient);  //configuramos o contexto da nossa API  $context = new \\fkooman\\OAuth\\Client\\Context($config[ api_context ], explode(   , $config[ api_scopes ]));  //verificamos se j\u00e1 temos uma Access Token  $accessToken = $api- getAccessToken($context);  if (false === $accessToken) {      //caso n\u00e3o tenhamos uma Access Token      //se temos uma vari\u00e1vel indicando que desejamos autenticar      if ($_GET[ authorize ] == 1) {                  //enviamos o usuario para a tela de autoriza\u00e7\u00e3o do gerenciador de identidades              header( HTTP/1.1 302 Found );          header( Location:   . $api- getAuthorizeUri($context));      } else {          //oferecemos a autentica\u00e7\u00e3o para o usu\u00e1rio          echo  a href= index.php?authorize=1 Logar com o Login do Cidadao /a ;      }      exit;  } else {      //caso tenhamos a Access token podemos consultar a API e obter os dados dele      try {          $client = new \\Guzzle\\Http\\Client();          $bearerAuth = new \\fkooman\\Guzzle\\Plugin\\BearerAuth\\BearerAuth($accessToken- getAccessToken());          $client- addSubscriber($bearerAuth);          $response = $client- get($config[ api_url ])- send();          header( Content-Type: application/json );          //o retorno da API \u00e9 um no formato JSON, por isso temos que decodifica-la          $json = json_decode($response- getBody(), true);          if (false !== $json) {              print_r($json);          } else {              print_r($response- getBody());          }      } catch (\\fkooman\\Guzzle\\Plugin\\BearerAuth\\Exception\\BearerErrorResponseException $e) {          //caso tenhamos um erro de token inv\u00e1lida, jogamos essa token fora, tentamos autenticar novamente          if ( invalid_token  === $e- getBearerReason()) {                          $api- deleteAccessToken($context);              $api- deleteRefreshToken($context);                          header( HTTP/1.1 302 Found );              header( Location:   . $api- getAuthorizeUri($context));              exit;          }          throw $e;      } catch (\\Exception $e) {          die(sprintf( ERROR: %s , $e- getMessage()));      }      }  }   Criando um script que recebe o retorno do gerenciador de identidades  Tamb\u00e9m \u00e9 necessario criar um script que recebe os dados de retorno do gerenciador de identidades. Esse script quando receber os dados do servidor deve encaminhar para o script de autentica\u00e7\u00e3o  //primeiro carregamos as configura\u00e7\u00f5es  $config = parse_ini_file( config.ini );  if (false === $config) {      die( please you need to have a config.ini file. Make one based on config.ini.dist );  }  //com as configura\u00e7\u00f5es \u00e9 criado um inst\u00e2ncia das configura\u00e7\u00f5es do cliente  $clientConfig = new \\fkooman\\OAuth\\Client\\ClientConfig($config);  try {      //criamos uma inst\u00e2ncia para armazenar os dados utilizados pelo Oauth      $tokenStorage = new \\fkooman\\OAuth\\Client\\SessionStorage();      //criamos uma inst\u00e2ncia para fazer a comunica\u00e7\u00e3o http      $httpClient = new \\Guzzle\\Http\\Client();      //criamos uma inst\u00e2ncia para lidar com o retorno do gerenciador de identidades      $cb = new \\fkooman\\OAuth\\Client\\Callback($config[ api_context ], $clientConfig, $tokenStorage, $httpClient);          $cb- handleCallback($_GET);      //direcionamos para o script de autentica\u00e7\u00e3o      header( HTTP/1.1 302 Found );      header( Location: index.php );      exit;  } catch (\\fkooman\\OAuth\\Client\\AuthorizeException $e) {      die(sprintf( ERROR: %s, DESCRIPTION: %s , $e- getMessage(), $e- getDescription()));  } catch (\\Exception $e) {      die(sprintf( ERROR: %s , $e- getMessage()));  }   Com esses dois script \u00e9 possivel autenticar o usu\u00e1rio e recuperar suas informa\u00e7\u00f5es do gerenciador de identidades", 
            "title": "Come\u00e7ando"
        }, 
        {
            "location": "/lc_develop_scopes/", 
            "text": "Escopos\n\n\nEsta p\u00e1gina descrever\u00e1 o que cada escopo faz. A seguir est\u00e1 a lista de todos os escopos dispon\u00edveis:\n\n\n\n\n public_profile \n\n\n full_name \n\n\n cpf \n\n\n birthdate \n\n\n email \n\n\n city \n\n\n country \n\n\n state \n\n\n addresses \n\n\n~~\n adress_number \n~~ (\ndeprecated\n)\n\n\n~~\n adress_complement \n~~ (\ndeprecated\n)\n\n\n~~\n rgs \n~~ (\ndeprecated\n)\n\n\n id_cards \n\n\n get_all_notifications \n\n\n notifications \n\n\n~~\n cep \n~~ (\ndeprecated\n)\n\n\n mobile \n\n\n logout \n\n\n\n\npublic_profile\n\n\nO escopo \npublic_profile\n permite acesso de leitura \u00e0s informa\u00e7\u00f5es p\u00fablicas de uma pessoa. S\u00e3o informa\u00e7\u00f5es p\u00fablicas:\n\n\n\n\nIdentificador \u00danico (\nid\n)\n\n\nPrimeiro Nome (\nfirst_name\n)\n\n\nNome de Usu\u00e1rio (\nusername\n)\n\n\nFoto do Perfil (\nprofile_picture\n)\n\n\nData da \u00faltima atualiza\u00e7\u00e3o do cadastro (\nupdated_at\n)\n\n\nBadges (\nbadges\n)\n\n\nFaixa et\u00e1ria (\nage_range\n)\n\n\n\n\nVeja um exemplo de um objeto JSON:\n\n\n{\n\n    \nid\n:\n \n1\n,\n\n    \nage_range\n:\n \n{\n\n        \nmin\n:\n \n21\n\n    \n},\n\n    \nfirst_name\n:\n \nGuilherme\n,\n\n    \nusername\n:\n \ngd\n,\n\n    \nprofile_picutre_url\n:\n \nhttp://placehold.it/245x245\n,\n\n    \nupdated_at\n:\n \n2014-11-25T16:22:28-0200\n,\n\n    \nbadges\n:\n \n{\n\n        \nlogin\n-\ncidadao\n.\nhas_cpf\n:\n \ntrue\n,\n\n        \nlogin\n-\ncidadao\n.\nvalid_email\n:\n \ntrue\n\n    \n}\n\n\n}\n\n\n\n\n\n\n full_name\n\n\nPermite acesso de leitura ao nome completo de uma pessoa, retornado nos seguintes atributos:\n\n\n{\n\n    \n// ...\n\n    \nfull_name\n:\n \nGuilherme Donato\n,\n\n    \n// ...\n\n\n}\n\n\n\n\n\n\n cpf\n\n\nPermite acesso de leitura no CPF de uma pessoa, que ser\u00e1 retornado como:\n\n\n{\n\n    \n// ...\n\n    \ncpf\n:\n \n12312312345\n,\n\n    \n// ...\n\n\n}\n\n\n\n\n\n\n birthdate\n\n\nPermite acesso \u00e0 data de nascimento completa de uma pessoa (em vez da faixa et\u00e1ria informada pelo public_profile). A data ser\u00e1 formatada de acordo com o ISO 8601:\n\n\n{\n\n    \n// ...\n\n    \nbirthdate\n:\n \n1989-08-21T00:00:00-0300\n,\n\n    \n// ...\n\n\n}\n\n\n\n\n\n\n email\n\n\nPermite acesso de leitura ao endere\u00e7o de email de uma pessoa.\n\n\n{\n\n    \n// ...\n\n    \nemail\n:\n \nuser@example.com\n,\n\n    \n// ...\n\n\n}\n\n\n\n\n\n\n city\n\n\nPermite acesso de leitura \u00e0 cidade de uma pessoa. Ser\u00e1 retornado o objeto City completo, incluindo State e Country, como no exemplo:\n\n\n{\n\n    \n// ...\n\n    \ncity\n:\n \n{\n\n        \nid\n:\n \n4314902\n,\n\n        \nname\n:\n \nPorto Alegre\n,\n\n        \nstat\n:\n \n4314902\n,\n\n        \nstate\n:\n \n{\n\n            \nid\n:\n \n43\n,\n\n            \nname\n:\n \nRio Grande do Sul\n,\n\n            \nacronym\n:\n \nRS\n,\n\n            \niso6\n:\n \nBR-RS\n,\n\n            \ncountry\n:\n \n{\n\n                \nid\n:\n \n36\n,\n\n                \nname\n:\n \nBRAZIL\n,\n\n                \niso2\n:\n \nBR\n,\n\n                \niso3\n:\n \nBRA\n\n            \n}\n\n        \n}\n\n    \n},\n\n    \n// ...\n\n\n}\n\n\n\n\n\n\n country\n\n\nPermite acesso de leitura do pa\u00eds de uma pessoa. Assim como em \ncity\n, o objeto completo ser\u00e1 retornado como no exemplo:\n\n\n{\n\n    \n// ...\n\n    \ncountry\n:\n \n{\n\n        \nid\n:\n \n36\n,\n\n        \nname\n:\n \nBRAZIL\n,\n\n        \niso2\n:\n \nBR\n,\n\n        \niso3\n:\n \nBRA\n,\n\n        \niso_num\n:\n \n76\n,\n\n        \npostal_format\n:\n \n99999-999\n,\n\n        \npostal_name\n:\n \nCEP\n\n    \n},\n\n    \n// ...\n\n\n}\n\n\n\n\n\n\n state\n\n\nPermite acesso de leitura do estado de uma pessoa. Assim como em \ncity\n e \ncountry\n, o objeto completo ser\u00e1 retornado como no exemplo:\n\n\n{\n\n    \n// ...\n\n    \nstate\n:\n \n{\n\n        \nid\n:\n \n43\n,\n\n        \nname\n:\n \nRio Grande do Sul\n,\n\n        \nacronym\n:\n \nRS\n,\n\n        \niso6\n:\n \nBR-RS\n,\n\n        \nfips\n:\n \n,\n\n        \nstat\n:\n \n43\n,\n\n        \nclass\n:\n \n,\n\n        \ncountry\n:\n \n{\n\n            \nid\n:\n \n36\n,\n\n            \nname\n:\n \nBRAZIL\n,\n\n            \niso2\n:\n \nBR\n,\n\n            \niso3\n:\n \nBRA\n\n        \n}\n\n    \n},\n\n    \n// ...\n\n\n}\n\n\n\n\n\n\n addresses\n\n\nPermite acesso de leitura aos endere\u00e7os de uma pessoa na forma de um array de PerssonAddress. O exemplo a seguir representa o endere\u00e7o exemplificado abaixo.\n\n\nRua Fulano de Tal, 123\nPr\u00e9dio 3, Sala 321\nPorto Alegre, RS, Brazil\n90123-121\n\n\n\n\n\n{\n\n    \n// ...\n\n    \naddresses\n:\n \n[\n\n        \n{\n\n            \nid\n:\n \n6\n,\n\n            \nname\n:\n \nCasa\n,\n\n            \naddress\n:\n \nRua Fulano de Tal\n,\n\n            \ncomplement\n:\n \nPr\u00e9dio 3, Sala 321\n,\n\n            \naddress_number\n:\n \n123\n,\n\n            \ncity\n:\n \n{\n\n                \nid\n:\n \n4314902\n,\n\n                \nname\n:\n \nPorto Alegre\n,\n\n                \nstate\n:\n \n{\n\n                    \nid\n:\n \n43\n,\n\n                    \nname\n:\n \nRio Grande do Sul\n,\n\n                    \nacronym\n:\n \nRS\n,\n\n                    \niso6\n:\n \nBR-RS\n,\n\n                    \ncountry\n:\n \n{\n\n                        \nid\n:\n \n36\n,\n\n                        \nname\n:\n \nBRAZIL\n,\n\n                        \niso2\n:\n \nBR\n,\n\n                        \niso3\n:\n \nBRA\n\n                    \n}\n\n                \n}\n\n            \n},\n\n            \npostal_code\n:\n \n90123-121\n\n        \n},\n\n        \n// ...\n\n    \n]\n\n    \n// ...\n\n\n}\n\n\n\n\n\n\n ~~adress_number~~ (deprecated)\n\n\nN\u00c3O USE\n\n\n ~~adress_complement~~ (deprecated)\n\n\nN\u00c3O USE\n\n\n ~~rgs~~ (deprecated)\n\n\nN\u00c3O USE\n\n\n id_cards\n\n\nPermite acesso de leitura a todos documentos de identidade de uma pessoa. Os documentos de identidade cont\u00e9m o \u00f3rg\u00e3o expedidor, o estado e o valor, que pode ser qualquer texto (n\u00fameros, letras, caracteres especiais...).\n\n\n{\n\n    \n// ...\n\n    \nid_cards\n:\n \n[\n\n        \n{\n\n            \nstate\n:\n \n{\n\n                \nid\n:\n \n43\n,\n\n                \nname\n:\n \nRio Grande do Sul\n,\n\n                \nacronym\n:\n \nRS\n,\n\n                \niso6\n:\n \nBR-RS\n,\n\n                \ncountry\n:\n \n{\n\n                    \nid\n:\n \n36\n,\n\n                    \nname\n:\n \nBRAZIL\n,\n\n                    \niso2\n:\n \nBR\n,\n\n                    \niso3\n:\n \nBRA\n\n                \n}\n\n            \n},\n\n            \nissuer\n:\n \nSJS/II RS\n,\n\n            \nvalue\n:\n \n1234567890\n\n        \n},\n\n        \n// ...\n\n    \n]\n\n    \n// ...\n\n\n}\n\n\n\n\n\n\n get_all_notifications\n\n\nPermite acesso de leitura a todas as notifica\u00e7\u00f5es de uma pessoa em vez de permitir acesso apenas \u00e0s notifica\u00e7\u00f5es do Client OAuth.\n\n\nEsse escopo n\u00e3o altera o conte\u00fado do objeto Person.\n\n\n notifications\n\n\nPermite acesso de leitura e \nescrite\n \u00e0s notifica\u00e7\u00f5es do Client OAuth.\n\n\nEsse escopo n\u00e3o altera o conte\u00fado do objeto Person.\n\n\n ~~cep~~ (deprecated)\n\n\nN\u00c3O USE\n\n\n mobile\n\n\nPermite acesso de leitura ao telefone celular de uma pessoa. Apenas n\u00fameros ser\u00e3o retornados, at\u00e9 mesmo o sinal \"+\" ser\u00e1 removido da entrada do usu\u00e1rio.\n\n\n{\n\n    \n// ...\n\n    \nmobile\n:\n \n555196668555\n,\n\n    \n// ...\n\n\n}\n\n\n\n\n\n\n logout\n\n\nPermite que sejam geradas Logou Keys de forma a habilitar um Client OAuth a deslogar um determinado usu\u00e1rio. \n Leia mais aqui", 
            "title": "Scopes"
        }, 
        {
            "location": "/lc_develop_scopes/#escopos", 
            "text": "Esta p\u00e1gina descrever\u00e1 o que cada escopo faz. A seguir est\u00e1 a lista de todos os escopos dispon\u00edveis:    public_profile    full_name    cpf    birthdate    email    city    country    state    addresses   ~~  adress_number  ~~ ( deprecated )  ~~  adress_complement  ~~ ( deprecated )  ~~  rgs  ~~ ( deprecated )   id_cards    get_all_notifications    notifications   ~~  cep  ~~ ( deprecated )   mobile    logout", 
            "title": "Escopos"
        }
    ]
}